// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hktrib/RetailGo/ent/category"
	"github.com/hktrib/RetailGo/ent/categoryitem"
	"github.com/hktrib/RetailGo/ent/item"
)

// CategoryItem is the model entity for the CategoryItem schema.
type CategoryItem struct {
	config `json:"-"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int `json:"category_id,omitempty"`
	// ItemID holds the value of the "item_id" field.
	ItemID int `json:"item_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CategoryItemQuery when eager-loading is set.
	Edges        CategoryItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CategoryItemEdges holds the relations/edges for other nodes in the graph.
type CategoryItemEdges struct {
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// Item holds the value of the item edge.
	Item *Item `json:"item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CategoryItemEdges) CategoryOrErr() (*Category, error) {
	if e.loadedTypes[0] {
		if e.Category == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CategoryItemEdges) ItemOrErr() (*Item, error) {
	if e.loadedTypes[1] {
		if e.Item == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: item.Label}
		}
		return e.Item, nil
	}
	return nil, &NotLoadedError{edge: "item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CategoryItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case categoryitem.FieldCategoryID, categoryitem.FieldItemID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CategoryItem fields.
func (ci *CategoryItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case categoryitem.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				ci.CategoryID = int(value.Int64)
			}
		case categoryitem.FieldItemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				ci.ItemID = int(value.Int64)
			}
		default:
			ci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CategoryItem.
// This includes values selected through modifiers, order, etc.
func (ci *CategoryItem) Value(name string) (ent.Value, error) {
	return ci.selectValues.Get(name)
}

// QueryCategory queries the "category" edge of the CategoryItem entity.
func (ci *CategoryItem) QueryCategory() *CategoryQuery {
	return NewCategoryItemClient(ci.config).QueryCategory(ci)
}

// QueryItem queries the "item" edge of the CategoryItem entity.
func (ci *CategoryItem) QueryItem() *ItemQuery {
	return NewCategoryItemClient(ci.config).QueryItem(ci)
}

// Update returns a builder for updating this CategoryItem.
// Note that you need to call CategoryItem.Unwrap() before calling this method if this CategoryItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CategoryItem) Update() *CategoryItemUpdateOne {
	return NewCategoryItemClient(ci.config).UpdateOne(ci)
}

// Unwrap unwraps the CategoryItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CategoryItem) Unwrap() *CategoryItem {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CategoryItem is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CategoryItem) String() string {
	var builder strings.Builder
	builder.WriteString("CategoryItem(")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("item_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.ItemID))
	builder.WriteByte(')')
	return builder.String()
}

// CategoryItems is a parsable slice of CategoryItem.
type CategoryItems []*CategoryItem
