// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hktrib/RetailGo/ent/category"
	"github.com/hktrib/RetailGo/ent/item"
	"github.com/hktrib/RetailGo/ent/store"
	"github.com/hktrib/RetailGo/ent/user"
)

// StoreCreate is the builder for creating a Store entity.
type StoreCreate struct {
	config
	mutation *StoreMutation
	hooks    []Hook
}

// SetStoreName sets the "store_name" field.
func (sc *StoreCreate) SetStoreName(s string) *StoreCreate {
	sc.mutation.SetStoreName(s)
	return sc
}

// SetOwnerEmail sets the "owner_email" field.
func (sc *StoreCreate) SetOwnerEmail(s string) *StoreCreate {
	sc.mutation.SetOwnerEmail(s)
	return sc
}

// SetNillableOwnerEmail sets the "owner_email" field if the given value is not nil.
func (sc *StoreCreate) SetNillableOwnerEmail(s *string) *StoreCreate {
	if s != nil {
		sc.SetOwnerEmail(*s)
	}
	return sc
}

// SetStoreAddress sets the "store_address" field.
func (sc *StoreCreate) SetStoreAddress(s string) *StoreCreate {
	sc.mutation.SetStoreAddress(s)
	return sc
}

// SetNillableStoreAddress sets the "store_address" field if the given value is not nil.
func (sc *StoreCreate) SetNillableStoreAddress(s *string) *StoreCreate {
	if s != nil {
		sc.SetStoreAddress(*s)
	}
	return sc
}

// SetStorePhone sets the "store_phone" field.
func (sc *StoreCreate) SetStorePhone(s string) *StoreCreate {
	sc.mutation.SetStorePhone(s)
	return sc
}

// SetNillableStorePhone sets the "store_phone" field if the given value is not nil.
func (sc *StoreCreate) SetNillableStorePhone(s *string) *StoreCreate {
	if s != nil {
		sc.SetStorePhone(*s)
	}
	return sc
}

// SetStoreType sets the "store_type" field.
func (sc *StoreCreate) SetStoreType(s string) *StoreCreate {
	sc.mutation.SetStoreType(s)
	return sc
}

// SetNillableStoreType sets the "store_type" field if the given value is not nil.
func (sc *StoreCreate) SetNillableStoreType(s *string) *StoreCreate {
	if s != nil {
		sc.SetStoreType(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StoreCreate) SetID(i int) *StoreCreate {
	sc.mutation.SetID(i)
	return sc
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (sc *StoreCreate) AddItemIDs(ids ...int) *StoreCreate {
	sc.mutation.AddItemIDs(ids...)
	return sc
}

// AddItems adds the "items" edges to the Item entity.
func (sc *StoreCreate) AddItems(i ...*Item) *StoreCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sc.AddItemIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (sc *StoreCreate) AddCategoryIDs(ids ...int) *StoreCreate {
	sc.mutation.AddCategoryIDs(ids...)
	return sc
}

// AddCategories adds the "categories" edges to the Category entity.
func (sc *StoreCreate) AddCategories(c ...*Category) *StoreCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddCategoryIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (sc *StoreCreate) AddUserIDs(ids ...int) *StoreCreate {
	sc.mutation.AddUserIDs(ids...)
	return sc
}

// AddUser adds the "user" edges to the User entity.
func (sc *StoreCreate) AddUser(u ...*User) *StoreCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sc.AddUserIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (sc *StoreCreate) Mutation() *StoreMutation {
	return sc.mutation
}

// Save creates the Store in the database.
func (sc *StoreCreate) Save(ctx context.Context) (*Store, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StoreCreate) SaveX(ctx context.Context) *Store {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StoreCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StoreCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StoreCreate) check() error {
	if _, ok := sc.mutation.StoreName(); !ok {
		return &ValidationError{Name: "store_name", err: errors.New(`ent: missing required field "Store.store_name"`)}
	}
	return nil
}

func (sc *StoreCreate) sqlSave(ctx context.Context) (*Store, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StoreCreate) createSpec() (*Store, *sqlgraph.CreateSpec) {
	var (
		_node = &Store{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(store.Table, sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.StoreName(); ok {
		_spec.SetField(store.FieldStoreName, field.TypeString, value)
		_node.StoreName = value
	}
	if value, ok := sc.mutation.OwnerEmail(); ok {
		_spec.SetField(store.FieldOwnerEmail, field.TypeString, value)
		_node.OwnerEmail = value
	}
	if value, ok := sc.mutation.StoreAddress(); ok {
		_spec.SetField(store.FieldStoreAddress, field.TypeString, value)
		_node.StoreAddress = value
	}
	if value, ok := sc.mutation.StorePhone(); ok {
		_spec.SetField(store.FieldStorePhone, field.TypeString, value)
		_node.StorePhone = value
	}
	if value, ok := sc.mutation.StoreType(); ok {
		_spec.SetField(store.FieldStoreType, field.TypeString, value)
		_node.StoreType = value
	}
	if nodes := sc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ItemsTable,
			Columns: []string{store.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.CategoriesTable,
			Columns: []string{store.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   store.UserTable,
			Columns: store.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StoreCreateBulk is the builder for creating many Store entities in bulk.
type StoreCreateBulk struct {
	config
	err      error
	builders []*StoreCreate
}

// Save creates the Store entities in the database.
func (scb *StoreCreateBulk) Save(ctx context.Context) ([]*Store, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Store, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StoreCreateBulk) SaveX(ctx context.Context) []*Store {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StoreCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StoreCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
