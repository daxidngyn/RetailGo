// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hktrib/RetailGo/ent/category"
	"github.com/hktrib/RetailGo/ent/categoryitem"
	"github.com/hktrib/RetailGo/ent/item"
	"github.com/hktrib/RetailGo/ent/predicate"
)

// CategoryItemUpdate is the builder for updating CategoryItem entities.
type CategoryItemUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryItemMutation
}

// Where appends a list predicates to the CategoryItemUpdate builder.
func (ciu *CategoryItemUpdate) Where(ps ...predicate.CategoryItem) *CategoryItemUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetCategoryID sets the "category_id" field.
func (ciu *CategoryItemUpdate) SetCategoryID(i int) *CategoryItemUpdate {
	ciu.mutation.SetCategoryID(i)
	return ciu
}

// SetItemID sets the "item_id" field.
func (ciu *CategoryItemUpdate) SetItemID(i int) *CategoryItemUpdate {
	ciu.mutation.SetItemID(i)
	return ciu
}

// SetCategory sets the "category" edge to the Category entity.
func (ciu *CategoryItemUpdate) SetCategory(c *Category) *CategoryItemUpdate {
	return ciu.SetCategoryID(c.ID)
}

// SetItem sets the "item" edge to the Item entity.
func (ciu *CategoryItemUpdate) SetItem(i *Item) *CategoryItemUpdate {
	return ciu.SetItemID(i.ID)
}

// Mutation returns the CategoryItemMutation object of the builder.
func (ciu *CategoryItemUpdate) Mutation() *CategoryItemMutation {
	return ciu.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (ciu *CategoryItemUpdate) ClearCategory() *CategoryItemUpdate {
	ciu.mutation.ClearCategory()
	return ciu
}

// ClearItem clears the "item" edge to the Item entity.
func (ciu *CategoryItemUpdate) ClearItem() *CategoryItemUpdate {
	ciu.mutation.ClearItem()
	return ciu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *CategoryItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CategoryItemUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CategoryItemUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CategoryItemUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciu *CategoryItemUpdate) check() error {
	if _, ok := ciu.mutation.CategoryID(); ciu.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CategoryItem.category"`)
	}
	if _, ok := ciu.mutation.ItemID(); ciu.mutation.ItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CategoryItem.item"`)
	}
	return nil
}

func (ciu *CategoryItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ciu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(categoryitem.Table, categoryitem.Columns, sqlgraph.NewFieldSpec(categoryitem.FieldCategoryID, field.TypeInt), sqlgraph.NewFieldSpec(categoryitem.FieldItemID, field.TypeInt))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ciu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   categoryitem.CategoryTable,
			Columns: []string{categoryitem.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   categoryitem.CategoryTable,
			Columns: []string{categoryitem.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   categoryitem.ItemTable,
			Columns: []string{categoryitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   categoryitem.ItemTable,
			Columns: []string{categoryitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// CategoryItemUpdateOne is the builder for updating a single CategoryItem entity.
type CategoryItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryItemMutation
}

// SetCategoryID sets the "category_id" field.
func (ciuo *CategoryItemUpdateOne) SetCategoryID(i int) *CategoryItemUpdateOne {
	ciuo.mutation.SetCategoryID(i)
	return ciuo
}

// SetItemID sets the "item_id" field.
func (ciuo *CategoryItemUpdateOne) SetItemID(i int) *CategoryItemUpdateOne {
	ciuo.mutation.SetItemID(i)
	return ciuo
}

// SetCategory sets the "category" edge to the Category entity.
func (ciuo *CategoryItemUpdateOne) SetCategory(c *Category) *CategoryItemUpdateOne {
	return ciuo.SetCategoryID(c.ID)
}

// SetItem sets the "item" edge to the Item entity.
func (ciuo *CategoryItemUpdateOne) SetItem(i *Item) *CategoryItemUpdateOne {
	return ciuo.SetItemID(i.ID)
}

// Mutation returns the CategoryItemMutation object of the builder.
func (ciuo *CategoryItemUpdateOne) Mutation() *CategoryItemMutation {
	return ciuo.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (ciuo *CategoryItemUpdateOne) ClearCategory() *CategoryItemUpdateOne {
	ciuo.mutation.ClearCategory()
	return ciuo
}

// ClearItem clears the "item" edge to the Item entity.
func (ciuo *CategoryItemUpdateOne) ClearItem() *CategoryItemUpdateOne {
	ciuo.mutation.ClearItem()
	return ciuo
}

// Where appends a list predicates to the CategoryItemUpdate builder.
func (ciuo *CategoryItemUpdateOne) Where(ps ...predicate.CategoryItem) *CategoryItemUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *CategoryItemUpdateOne) Select(field string, fields ...string) *CategoryItemUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated CategoryItem entity.
func (ciuo *CategoryItemUpdateOne) Save(ctx context.Context) (*CategoryItem, error) {
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CategoryItemUpdateOne) SaveX(ctx context.Context) *CategoryItem {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CategoryItemUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CategoryItemUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciuo *CategoryItemUpdateOne) check() error {
	if _, ok := ciuo.mutation.CategoryID(); ciuo.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CategoryItem.category"`)
	}
	if _, ok := ciuo.mutation.ItemID(); ciuo.mutation.ItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CategoryItem.item"`)
	}
	return nil
}

func (ciuo *CategoryItemUpdateOne) sqlSave(ctx context.Context) (_node *CategoryItem, err error) {
	if err := ciuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(categoryitem.Table, categoryitem.Columns, sqlgraph.NewFieldSpec(categoryitem.FieldCategoryID, field.TypeInt), sqlgraph.NewFieldSpec(categoryitem.FieldItemID, field.TypeInt))
	if id, ok := ciuo.mutation.CategoryID(); !ok {
		return nil, &ValidationError{Name: "category_id", err: errors.New(`ent: missing "CategoryItem.category_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := ciuo.mutation.ItemID(); !ok {
		return nil, &ValidationError{Name: "item_id", err: errors.New(`ent: missing "CategoryItem.item_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !categoryitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ciuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   categoryitem.CategoryTable,
			Columns: []string{categoryitem.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   categoryitem.CategoryTable,
			Columns: []string{categoryitem.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   categoryitem.ItemTable,
			Columns: []string{categoryitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   categoryitem.ItemTable,
			Columns: []string{categoryitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CategoryItem{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}
