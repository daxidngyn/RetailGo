// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hktrib/RetailGo/ent/category"
	"github.com/hktrib/RetailGo/ent/item"
	"github.com/hktrib/RetailGo/ent/usertostore"
)

// UserToStoreCreate is the builder for creating a UserToStore entity.
type UserToStoreCreate struct {
	config
	mutation *UserToStoreMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (utsc *UserToStoreCreate) SetUserID(i int) *UserToStoreCreate {
	utsc.mutation.SetUserID(i)
	return utsc
}

// SetStoreID sets the "store_id" field.
func (utsc *UserToStoreCreate) SetStoreID(i int) *UserToStoreCreate {
	utsc.mutation.SetStoreID(i)
	return utsc
}

// SetPermissionLevel sets the "permission_level" field.
func (utsc *UserToStoreCreate) SetPermissionLevel(i int) *UserToStoreCreate {
	utsc.mutation.SetPermissionLevel(i)
	return utsc
}

// SetJoinedAt sets the "joined_at" field.
func (utsc *UserToStoreCreate) SetJoinedAt(i int) *UserToStoreCreate {
	utsc.mutation.SetJoinedAt(i)
	return utsc
}

// SetUser sets the "user" edge to the Category entity.
func (utsc *UserToStoreCreate) SetUser(c *Category) *UserToStoreCreate {
	return utsc.SetUserID(c.ID)
}

// SetStore sets the "store" edge to the Item entity.
func (utsc *UserToStoreCreate) SetStore(i *Item) *UserToStoreCreate {
	return utsc.SetStoreID(i.ID)
}

// Mutation returns the UserToStoreMutation object of the builder.
func (utsc *UserToStoreCreate) Mutation() *UserToStoreMutation {
	return utsc.mutation
}

// Save creates the UserToStore in the database.
func (utsc *UserToStoreCreate) Save(ctx context.Context) (*UserToStore, error) {
	return withHooks(ctx, utsc.sqlSave, utsc.mutation, utsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utsc *UserToStoreCreate) SaveX(ctx context.Context) *UserToStore {
	v, err := utsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utsc *UserToStoreCreate) Exec(ctx context.Context) error {
	_, err := utsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utsc *UserToStoreCreate) ExecX(ctx context.Context) {
	if err := utsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utsc *UserToStoreCreate) check() error {
	if _, ok := utsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserToStore.user_id"`)}
	}
	if _, ok := utsc.mutation.StoreID(); !ok {
		return &ValidationError{Name: "store_id", err: errors.New(`ent: missing required field "UserToStore.store_id"`)}
	}
	if _, ok := utsc.mutation.PermissionLevel(); !ok {
		return &ValidationError{Name: "permission_level", err: errors.New(`ent: missing required field "UserToStore.permission_level"`)}
	}
	if _, ok := utsc.mutation.JoinedAt(); !ok {
		return &ValidationError{Name: "joined_at", err: errors.New(`ent: missing required field "UserToStore.joined_at"`)}
	}
	if _, ok := utsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserToStore.user"`)}
	}
	if _, ok := utsc.mutation.StoreID(); !ok {
		return &ValidationError{Name: "store", err: errors.New(`ent: missing required edge "UserToStore.store"`)}
	}
	return nil
}

func (utsc *UserToStoreCreate) sqlSave(ctx context.Context) (*UserToStore, error) {
	if err := utsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (utsc *UserToStoreCreate) createSpec() (*UserToStore, *sqlgraph.CreateSpec) {
	var (
		_node = &UserToStore{config: utsc.config}
		_spec = sqlgraph.NewCreateSpec(usertostore.Table, nil)
	)
	if value, ok := utsc.mutation.PermissionLevel(); ok {
		_spec.SetField(usertostore.FieldPermissionLevel, field.TypeInt, value)
		_node.PermissionLevel = value
	}
	if value, ok := utsc.mutation.JoinedAt(); ok {
		_spec.SetField(usertostore.FieldJoinedAt, field.TypeInt, value)
		_node.JoinedAt = value
	}
	if nodes := utsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertostore.UserTable,
			Columns: []string{usertostore.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := utsc.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertostore.StoreTable,
			Columns: []string{usertostore.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserToStoreCreateBulk is the builder for creating many UserToStore entities in bulk.
type UserToStoreCreateBulk struct {
	config
	err      error
	builders []*UserToStoreCreate
}

// Save creates the UserToStore entities in the database.
func (utscb *UserToStoreCreateBulk) Save(ctx context.Context) ([]*UserToStore, error) {
	if utscb.err != nil {
		return nil, utscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utscb.builders))
	nodes := make([]*UserToStore, len(utscb.builders))
	mutators := make([]Mutator, len(utscb.builders))
	for i := range utscb.builders {
		func(i int, root context.Context) {
			builder := utscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserToStoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utscb *UserToStoreCreateBulk) SaveX(ctx context.Context) []*UserToStore {
	v, err := utscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utscb *UserToStoreCreateBulk) Exec(ctx context.Context) error {
	_, err := utscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utscb *UserToStoreCreateBulk) ExecX(ctx context.Context) {
	if err := utscb.Exec(ctx); err != nil {
		panic(err)
	}
}
