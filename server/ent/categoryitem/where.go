// Code generated by ent, DO NOT EDIT.

package categoryitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hktrib/RetailGo/ent/predicate"
)

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int) predicate.CategoryItem {
	return predicate.CategoryItem(sql.FieldEQ(FieldCategoryID, v))
}

// ItemID applies equality check predicate on the "item_id" field. It's identical to ItemIDEQ.
func ItemID(v int) predicate.CategoryItem {
	return predicate.CategoryItem(sql.FieldEQ(FieldItemID, v))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int) predicate.CategoryItem {
	return predicate.CategoryItem(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int) predicate.CategoryItem {
	return predicate.CategoryItem(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int) predicate.CategoryItem {
	return predicate.CategoryItem(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int) predicate.CategoryItem {
	return predicate.CategoryItem(sql.FieldNotIn(FieldCategoryID, vs...))
}

// ItemIDEQ applies the EQ predicate on the "item_id" field.
func ItemIDEQ(v int) predicate.CategoryItem {
	return predicate.CategoryItem(sql.FieldEQ(FieldItemID, v))
}

// ItemIDNEQ applies the NEQ predicate on the "item_id" field.
func ItemIDNEQ(v int) predicate.CategoryItem {
	return predicate.CategoryItem(sql.FieldNEQ(FieldItemID, v))
}

// ItemIDIn applies the In predicate on the "item_id" field.
func ItemIDIn(vs ...int) predicate.CategoryItem {
	return predicate.CategoryItem(sql.FieldIn(FieldItemID, vs...))
}

// ItemIDNotIn applies the NotIn predicate on the "item_id" field.
func ItemIDNotIn(vs ...int) predicate.CategoryItem {
	return predicate.CategoryItem(sql.FieldNotIn(FieldItemID, vs...))
}

// HasCategory applies the HasEdge predicate on the "category" edge.
func HasCategory() predicate.CategoryItem {
	return predicate.CategoryItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, CategoryColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, CategoryTable, CategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryWith applies the HasEdge predicate on the "category" edge with a given conditions (other predicates).
func HasCategoryWith(preds ...predicate.Category) predicate.CategoryItem {
	return predicate.CategoryItem(func(s *sql.Selector) {
		step := newCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItem applies the HasEdge predicate on the "item" edge.
func HasItem() predicate.CategoryItem {
	return predicate.CategoryItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ItemColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, ItemTable, ItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemWith applies the HasEdge predicate on the "item" edge with a given conditions (other predicates).
func HasItemWith(preds ...predicate.Item) predicate.CategoryItem {
	return predicate.CategoryItem(func(s *sql.Selector) {
		step := newItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CategoryItem) predicate.CategoryItem {
	return predicate.CategoryItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CategoryItem) predicate.CategoryItem {
	return predicate.CategoryItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CategoryItem) predicate.CategoryItem {
	return predicate.CategoryItem(sql.NotPredicates(p))
}
