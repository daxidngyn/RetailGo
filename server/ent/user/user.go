// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldIsOwner holds the string denoting the is_owner field in the database.
	FieldIsOwner = "is_owner"
	// FieldRealName holds the string denoting the real_name field in the database.
	FieldRealName = "real_name"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldClerkUserID holds the string denoting the clerk_user_id field in the database.
	FieldClerkUserID = "clerk_user_id"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeUserToStore holds the string denoting the usertostore edge name in mutations.
	EdgeUserToStore = "UserToStore"
	// Table holds the table name of the user in the database.
	Table = "users"
	// StoreTable is the table that holds the store relation/edge. The primary key declared below.
	StoreTable = "user_to_stores"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "stores"
	// UserToStoreTable is the table that holds the UserToStore relation/edge.
	UserToStoreTable = "user_to_stores"
	// UserToStoreInverseTable is the table name for the UserToStore entity.
	// It exists in this package in order to avoid circular dependency with the "usertostore" package.
	UserToStoreInverseTable = "user_to_stores"
	// UserToStoreColumn is the table column denoting the UserToStore relation/edge.
	UserToStoreColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldEmail,
	FieldIsOwner,
	FieldRealName,
	FieldStoreID,
	FieldClerkUserID,
}

var (
	// StorePrimaryKey and StoreColumn2 are the table columns denoting the
	// primary key for the store relation (M2M).
	StorePrimaryKey = []string{"user_id", "store_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByIsOwner orders the results by the is_owner field.
func ByIsOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsOwner, opts...).ToFunc()
}

// ByRealName orders the results by the real_name field.
func ByRealName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRealName, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// ByClerkUserID orders the results by the clerk_user_id field.
func ByClerkUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClerkUserID, opts...).ToFunc()
}

// ByStoreCount orders the results by store count.
func ByStoreCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStoreStep(), opts...)
	}
}

// ByStore orders the results by store terms.
func ByStore(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserToStoreCount orders the results by UserToStore count.
func ByUserToStoreCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserToStoreStep(), opts...)
	}
}

// ByUserToStore orders the results by UserToStore terms.
func ByUserToStore(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserToStoreStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, StoreTable, StorePrimaryKey...),
	)
}
func newUserToStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserToStoreInverseTable, UserToStoreColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, UserToStoreTable, UserToStoreColumn),
	)
}
