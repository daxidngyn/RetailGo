// Code generated by ent, DO NOT EDIT.

package store

import (
	"entgo.io/ent/dialect/sql"
	"github.com/hktrib/RetailGo/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldID, id))
}

// StoreName applies equality check predicate on the "store_name" field. It's identical to StoreNameEQ.
func StoreName(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldStoreName, v))
}

// StoreNameEQ applies the EQ predicate on the "store_name" field.
func StoreNameEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldStoreName, v))
}

// StoreNameNEQ applies the NEQ predicate on the "store_name" field.
func StoreNameNEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldStoreName, v))
}

// StoreNameIn applies the In predicate on the "store_name" field.
func StoreNameIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldStoreName, vs...))
}

// StoreNameNotIn applies the NotIn predicate on the "store_name" field.
func StoreNameNotIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldStoreName, vs...))
}

// StoreNameGT applies the GT predicate on the "store_name" field.
func StoreNameGT(v string) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldStoreName, v))
}

// StoreNameGTE applies the GTE predicate on the "store_name" field.
func StoreNameGTE(v string) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldStoreName, v))
}

// StoreNameLT applies the LT predicate on the "store_name" field.
func StoreNameLT(v string) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldStoreName, v))
}

// StoreNameLTE applies the LTE predicate on the "store_name" field.
func StoreNameLTE(v string) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldStoreName, v))
}

// StoreNameContains applies the Contains predicate on the "store_name" field.
func StoreNameContains(v string) predicate.Store {
	return predicate.Store(sql.FieldContains(FieldStoreName, v))
}

// StoreNameHasPrefix applies the HasPrefix predicate on the "store_name" field.
func StoreNameHasPrefix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasPrefix(FieldStoreName, v))
}

// StoreNameHasSuffix applies the HasSuffix predicate on the "store_name" field.
func StoreNameHasSuffix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasSuffix(FieldStoreName, v))
}

// StoreNameEqualFold applies the EqualFold predicate on the "store_name" field.
func StoreNameEqualFold(v string) predicate.Store {
	return predicate.Store(sql.FieldEqualFold(FieldStoreName, v))
}

// StoreNameContainsFold applies the ContainsFold predicate on the "store_name" field.
func StoreNameContainsFold(v string) predicate.Store {
	return predicate.Store(sql.FieldContainsFold(FieldStoreName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Store) predicate.Store {
	return predicate.Store(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Store) predicate.Store {
	return predicate.Store(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Store) predicate.Store {
	return predicate.Store(sql.NotPredicates(p))
}
