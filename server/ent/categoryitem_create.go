// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hktrib/RetailGo/ent/category"
	"github.com/hktrib/RetailGo/ent/categoryitem"
	"github.com/hktrib/RetailGo/ent/item"
)

// CategoryItemCreate is the builder for creating a CategoryItem entity.
type CategoryItemCreate struct {
	config
	mutation *CategoryItemMutation
	hooks    []Hook
}

// SetCategoryID sets the "category_id" field.
func (cic *CategoryItemCreate) SetCategoryID(i int) *CategoryItemCreate {
	cic.mutation.SetCategoryID(i)
	return cic
}

// SetItemID sets the "item_id" field.
func (cic *CategoryItemCreate) SetItemID(i int) *CategoryItemCreate {
	cic.mutation.SetItemID(i)
	return cic
}

// SetCategory sets the "category" edge to the Category entity.
func (cic *CategoryItemCreate) SetCategory(c *Category) *CategoryItemCreate {
	return cic.SetCategoryID(c.ID)
}

// SetItem sets the "item" edge to the Item entity.
func (cic *CategoryItemCreate) SetItem(i *Item) *CategoryItemCreate {
	return cic.SetItemID(i.ID)
}

// Mutation returns the CategoryItemMutation object of the builder.
func (cic *CategoryItemCreate) Mutation() *CategoryItemMutation {
	return cic.mutation
}

// Save creates the CategoryItem in the database.
func (cic *CategoryItemCreate) Save(ctx context.Context) (*CategoryItem, error) {
	return withHooks(ctx, cic.sqlSave, cic.mutation, cic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CategoryItemCreate) SaveX(ctx context.Context) *CategoryItem {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CategoryItemCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CategoryItemCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CategoryItemCreate) check() error {
	if _, ok := cic.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`ent: missing required field "CategoryItem.category_id"`)}
	}
	if _, ok := cic.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`ent: missing required field "CategoryItem.item_id"`)}
	}
	if _, ok := cic.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required edge "CategoryItem.category"`)}
	}
	if _, ok := cic.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item", err: errors.New(`ent: missing required edge "CategoryItem.item"`)}
	}
	return nil
}

func (cic *CategoryItemCreate) sqlSave(ctx context.Context) (*CategoryItem, error) {
	if err := cic.check(); err != nil {
		return nil, err
	}
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (cic *CategoryItemCreate) createSpec() (*CategoryItem, *sqlgraph.CreateSpec) {
	var (
		_node = &CategoryItem{config: cic.config}
		_spec = sqlgraph.NewCreateSpec(categoryitem.Table, nil)
	)
	if nodes := cic.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   categoryitem.CategoryTable,
			Columns: []string{categoryitem.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   categoryitem.ItemTable,
			Columns: []string{categoryitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ItemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CategoryItemCreateBulk is the builder for creating many CategoryItem entities in bulk.
type CategoryItemCreateBulk struct {
	config
	err      error
	builders []*CategoryItemCreate
}

// Save creates the CategoryItem entities in the database.
func (cicb *CategoryItemCreateBulk) Save(ctx context.Context) ([]*CategoryItem, error) {
	if cicb.err != nil {
		return nil, cicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CategoryItem, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CategoryItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CategoryItemCreateBulk) SaveX(ctx context.Context) []*CategoryItem {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CategoryItemCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CategoryItemCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
