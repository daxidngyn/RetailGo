// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hktrib/RetailGo/internal/ent/clerkuser_store"
	"github.com/hktrib/RetailGo/internal/ent/predicate"
)

// ClerkUserStoreUpdate is the builder for updating ClerkUser_Store entities.
type ClerkUserStoreUpdate struct {
	config
	hooks    []Hook
	mutation *ClerkUserStoreMutation
}

// Where appends a list predicates to the ClerkUserStoreUpdate builder.
func (cusu *ClerkUserStoreUpdate) Where(ps ...predicate.ClerkUser_Store) *ClerkUserStoreUpdate {
	cusu.mutation.Where(ps...)
	return cusu
}

// SetClerkID sets the "clerk_id" field.
func (cusu *ClerkUserStoreUpdate) SetClerkID(s string) *ClerkUserStoreUpdate {
	cusu.mutation.SetClerkID(s)
	return cusu
}

// SetNillableClerkID sets the "clerk_id" field if the given value is not nil.
func (cusu *ClerkUserStoreUpdate) SetNillableClerkID(s *string) *ClerkUserStoreUpdate {
	if s != nil {
		cusu.SetClerkID(*s)
	}
	return cusu
}

// SetStoreID sets the "store_id" field.
func (cusu *ClerkUserStoreUpdate) SetStoreID(i int) *ClerkUserStoreUpdate {
	cusu.mutation.ResetStoreID()
	cusu.mutation.SetStoreID(i)
	return cusu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (cusu *ClerkUserStoreUpdate) SetNillableStoreID(i *int) *ClerkUserStoreUpdate {
	if i != nil {
		cusu.SetStoreID(*i)
	}
	return cusu
}

// AddStoreID adds i to the "store_id" field.
func (cusu *ClerkUserStoreUpdate) AddStoreID(i int) *ClerkUserStoreUpdate {
	cusu.mutation.AddStoreID(i)
	return cusu
}

// Mutation returns the ClerkUserStoreMutation object of the builder.
func (cusu *ClerkUserStoreUpdate) Mutation() *ClerkUserStoreMutation {
	return cusu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cusu *ClerkUserStoreUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cusu.sqlSave, cusu.mutation, cusu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cusu *ClerkUserStoreUpdate) SaveX(ctx context.Context) int {
	affected, err := cusu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cusu *ClerkUserStoreUpdate) Exec(ctx context.Context) error {
	_, err := cusu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cusu *ClerkUserStoreUpdate) ExecX(ctx context.Context) {
	if err := cusu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cusu *ClerkUserStoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(clerkuser_store.Table, clerkuser_store.Columns, sqlgraph.NewFieldSpec(clerkuser_store.FieldID, field.TypeInt))
	if ps := cusu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cusu.mutation.ClerkID(); ok {
		_spec.SetField(clerkuser_store.FieldClerkID, field.TypeString, value)
	}
	if value, ok := cusu.mutation.StoreID(); ok {
		_spec.SetField(clerkuser_store.FieldStoreID, field.TypeInt, value)
	}
	if value, ok := cusu.mutation.AddedStoreID(); ok {
		_spec.AddField(clerkuser_store.FieldStoreID, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cusu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clerkuser_store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cusu.mutation.done = true
	return n, nil
}

// ClerkUserStoreUpdateOne is the builder for updating a single ClerkUser_Store entity.
type ClerkUserStoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClerkUserStoreMutation
}

// SetClerkID sets the "clerk_id" field.
func (cusuo *ClerkUserStoreUpdateOne) SetClerkID(s string) *ClerkUserStoreUpdateOne {
	cusuo.mutation.SetClerkID(s)
	return cusuo
}

// SetNillableClerkID sets the "clerk_id" field if the given value is not nil.
func (cusuo *ClerkUserStoreUpdateOne) SetNillableClerkID(s *string) *ClerkUserStoreUpdateOne {
	if s != nil {
		cusuo.SetClerkID(*s)
	}
	return cusuo
}

// SetStoreID sets the "store_id" field.
func (cusuo *ClerkUserStoreUpdateOne) SetStoreID(i int) *ClerkUserStoreUpdateOne {
	cusuo.mutation.ResetStoreID()
	cusuo.mutation.SetStoreID(i)
	return cusuo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (cusuo *ClerkUserStoreUpdateOne) SetNillableStoreID(i *int) *ClerkUserStoreUpdateOne {
	if i != nil {
		cusuo.SetStoreID(*i)
	}
	return cusuo
}

// AddStoreID adds i to the "store_id" field.
func (cusuo *ClerkUserStoreUpdateOne) AddStoreID(i int) *ClerkUserStoreUpdateOne {
	cusuo.mutation.AddStoreID(i)
	return cusuo
}

// Mutation returns the ClerkUserStoreMutation object of the builder.
func (cusuo *ClerkUserStoreUpdateOne) Mutation() *ClerkUserStoreMutation {
	return cusuo.mutation
}

// Where appends a list predicates to the ClerkUserStoreUpdate builder.
func (cusuo *ClerkUserStoreUpdateOne) Where(ps ...predicate.ClerkUser_Store) *ClerkUserStoreUpdateOne {
	cusuo.mutation.Where(ps...)
	return cusuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cusuo *ClerkUserStoreUpdateOne) Select(field string, fields ...string) *ClerkUserStoreUpdateOne {
	cusuo.fields = append([]string{field}, fields...)
	return cusuo
}

// Save executes the query and returns the updated ClerkUser_Store entity.
func (cusuo *ClerkUserStoreUpdateOne) Save(ctx context.Context) (*ClerkUser_Store, error) {
	return withHooks(ctx, cusuo.sqlSave, cusuo.mutation, cusuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cusuo *ClerkUserStoreUpdateOne) SaveX(ctx context.Context) *ClerkUser_Store {
	node, err := cusuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cusuo *ClerkUserStoreUpdateOne) Exec(ctx context.Context) error {
	_, err := cusuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cusuo *ClerkUserStoreUpdateOne) ExecX(ctx context.Context) {
	if err := cusuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cusuo *ClerkUserStoreUpdateOne) sqlSave(ctx context.Context) (_node *ClerkUser_Store, err error) {
	_spec := sqlgraph.NewUpdateSpec(clerkuser_store.Table, clerkuser_store.Columns, sqlgraph.NewFieldSpec(clerkuser_store.FieldID, field.TypeInt))
	id, ok := cusuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ClerkUser_Store.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cusuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clerkuser_store.FieldID)
		for _, f := range fields {
			if !clerkuser_store.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clerkuser_store.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cusuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cusuo.mutation.ClerkID(); ok {
		_spec.SetField(clerkuser_store.FieldClerkID, field.TypeString, value)
	}
	if value, ok := cusuo.mutation.StoreID(); ok {
		_spec.SetField(clerkuser_store.FieldStoreID, field.TypeInt, value)
	}
	if value, ok := cusuo.mutation.AddedStoreID(); ok {
		_spec.AddField(clerkuser_store.FieldStoreID, field.TypeInt, value)
	}
	_node = &ClerkUser_Store{config: cusuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cusuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clerkuser_store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cusuo.mutation.done = true
	return _node, nil
}
