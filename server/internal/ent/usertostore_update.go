// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hktrib/RetailGo/internal/ent/predicate"
	"github.com/hktrib/RetailGo/internal/ent/store"
	"github.com/hktrib/RetailGo/internal/ent/user"
	"github.com/hktrib/RetailGo/internal/ent/usertostore"
)

// UserToStoreUpdate is the builder for updating UserToStore entities.
type UserToStoreUpdate struct {
	config
	hooks    []Hook
	mutation *UserToStoreMutation
}

// Where appends a list predicates to the UserToStoreUpdate builder.
func (utsu *UserToStoreUpdate) Where(ps ...predicate.UserToStore) *UserToStoreUpdate {
	utsu.mutation.Where(ps...)
	return utsu
}

// SetUserID sets the "user_id" field.
func (utsu *UserToStoreUpdate) SetUserID(i int) *UserToStoreUpdate {
	utsu.mutation.SetUserID(i)
	return utsu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utsu *UserToStoreUpdate) SetNillableUserID(i *int) *UserToStoreUpdate {
	if i != nil {
		utsu.SetUserID(*i)
	}
	return utsu
}

// SetStoreID sets the "store_id" field.
func (utsu *UserToStoreUpdate) SetStoreID(i int) *UserToStoreUpdate {
	utsu.mutation.SetStoreID(i)
	return utsu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (utsu *UserToStoreUpdate) SetNillableStoreID(i *int) *UserToStoreUpdate {
	if i != nil {
		utsu.SetStoreID(*i)
	}
	return utsu
}

// SetStoreName sets the "store_name" field.
func (utsu *UserToStoreUpdate) SetStoreName(i int) *UserToStoreUpdate {
	utsu.mutation.ResetStoreName()
	utsu.mutation.SetStoreName(i)
	return utsu
}

// SetNillableStoreName sets the "store_name" field if the given value is not nil.
func (utsu *UserToStoreUpdate) SetNillableStoreName(i *int) *UserToStoreUpdate {
	if i != nil {
		utsu.SetStoreName(*i)
	}
	return utsu
}

// AddStoreName adds i to the "store_name" field.
func (utsu *UserToStoreUpdate) AddStoreName(i int) *UserToStoreUpdate {
	utsu.mutation.AddStoreName(i)
	return utsu
}

// ClearStoreName clears the value of the "store_name" field.
func (utsu *UserToStoreUpdate) ClearStoreName() *UserToStoreUpdate {
	utsu.mutation.ClearStoreName()
	return utsu
}

// SetClerkUserID sets the "clerk_user_id" field.
func (utsu *UserToStoreUpdate) SetClerkUserID(s string) *UserToStoreUpdate {
	utsu.mutation.SetClerkUserID(s)
	return utsu
}

// SetNillableClerkUserID sets the "clerk_user_id" field if the given value is not nil.
func (utsu *UserToStoreUpdate) SetNillableClerkUserID(s *string) *UserToStoreUpdate {
	if s != nil {
		utsu.SetClerkUserID(*s)
	}
	return utsu
}

// ClearClerkUserID clears the value of the "clerk_user_id" field.
func (utsu *UserToStoreUpdate) ClearClerkUserID() *UserToStoreUpdate {
	utsu.mutation.ClearClerkUserID()
	return utsu
}

// SetPermissionLevel sets the "permission_level" field.
func (utsu *UserToStoreUpdate) SetPermissionLevel(i int) *UserToStoreUpdate {
	utsu.mutation.ResetPermissionLevel()
	utsu.mutation.SetPermissionLevel(i)
	return utsu
}

// SetNillablePermissionLevel sets the "permission_level" field if the given value is not nil.
func (utsu *UserToStoreUpdate) SetNillablePermissionLevel(i *int) *UserToStoreUpdate {
	if i != nil {
		utsu.SetPermissionLevel(*i)
	}
	return utsu
}

// AddPermissionLevel adds i to the "permission_level" field.
func (utsu *UserToStoreUpdate) AddPermissionLevel(i int) *UserToStoreUpdate {
	utsu.mutation.AddPermissionLevel(i)
	return utsu
}

// ClearPermissionLevel clears the value of the "permission_level" field.
func (utsu *UserToStoreUpdate) ClearPermissionLevel() *UserToStoreUpdate {
	utsu.mutation.ClearPermissionLevel()
	return utsu
}

// SetJoinedAt sets the "joined_at" field.
func (utsu *UserToStoreUpdate) SetJoinedAt(i int) *UserToStoreUpdate {
	utsu.mutation.ResetJoinedAt()
	utsu.mutation.SetJoinedAt(i)
	return utsu
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (utsu *UserToStoreUpdate) SetNillableJoinedAt(i *int) *UserToStoreUpdate {
	if i != nil {
		utsu.SetJoinedAt(*i)
	}
	return utsu
}

// AddJoinedAt adds i to the "joined_at" field.
func (utsu *UserToStoreUpdate) AddJoinedAt(i int) *UserToStoreUpdate {
	utsu.mutation.AddJoinedAt(i)
	return utsu
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (utsu *UserToStoreUpdate) ClearJoinedAt() *UserToStoreUpdate {
	utsu.mutation.ClearJoinedAt()
	return utsu
}

// SetUser sets the "user" edge to the User entity.
func (utsu *UserToStoreUpdate) SetUser(u *User) *UserToStoreUpdate {
	return utsu.SetUserID(u.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (utsu *UserToStoreUpdate) SetStore(s *Store) *UserToStoreUpdate {
	return utsu.SetStoreID(s.ID)
}

// Mutation returns the UserToStoreMutation object of the builder.
func (utsu *UserToStoreUpdate) Mutation() *UserToStoreMutation {
	return utsu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utsu *UserToStoreUpdate) ClearUser() *UserToStoreUpdate {
	utsu.mutation.ClearUser()
	return utsu
}

// ClearStore clears the "store" edge to the Store entity.
func (utsu *UserToStoreUpdate) ClearStore() *UserToStoreUpdate {
	utsu.mutation.ClearStore()
	return utsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utsu *UserToStoreUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utsu.sqlSave, utsu.mutation, utsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utsu *UserToStoreUpdate) SaveX(ctx context.Context) int {
	affected, err := utsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utsu *UserToStoreUpdate) Exec(ctx context.Context) error {
	_, err := utsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utsu *UserToStoreUpdate) ExecX(ctx context.Context) {
	if err := utsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utsu *UserToStoreUpdate) check() error {
	if _, ok := utsu.mutation.UserID(); utsu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserToStore.user"`)
	}
	if _, ok := utsu.mutation.StoreID(); utsu.mutation.StoreCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserToStore.store"`)
	}
	return nil
}

func (utsu *UserToStoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := utsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertostore.Table, usertostore.Columns, sqlgraph.NewFieldSpec(usertostore.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(usertostore.FieldStoreID, field.TypeInt))
	if ps := utsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utsu.mutation.StoreName(); ok {
		_spec.SetField(usertostore.FieldStoreName, field.TypeInt, value)
	}
	if value, ok := utsu.mutation.AddedStoreName(); ok {
		_spec.AddField(usertostore.FieldStoreName, field.TypeInt, value)
	}
	if utsu.mutation.StoreNameCleared() {
		_spec.ClearField(usertostore.FieldStoreName, field.TypeInt)
	}
	if value, ok := utsu.mutation.ClerkUserID(); ok {
		_spec.SetField(usertostore.FieldClerkUserID, field.TypeString, value)
	}
	if utsu.mutation.ClerkUserIDCleared() {
		_spec.ClearField(usertostore.FieldClerkUserID, field.TypeString)
	}
	if value, ok := utsu.mutation.PermissionLevel(); ok {
		_spec.SetField(usertostore.FieldPermissionLevel, field.TypeInt, value)
	}
	if value, ok := utsu.mutation.AddedPermissionLevel(); ok {
		_spec.AddField(usertostore.FieldPermissionLevel, field.TypeInt, value)
	}
	if utsu.mutation.PermissionLevelCleared() {
		_spec.ClearField(usertostore.FieldPermissionLevel, field.TypeInt)
	}
	if value, ok := utsu.mutation.JoinedAt(); ok {
		_spec.SetField(usertostore.FieldJoinedAt, field.TypeInt, value)
	}
	if value, ok := utsu.mutation.AddedJoinedAt(); ok {
		_spec.AddField(usertostore.FieldJoinedAt, field.TypeInt, value)
	}
	if utsu.mutation.JoinedAtCleared() {
		_spec.ClearField(usertostore.FieldJoinedAt, field.TypeInt)
	}
	if utsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertostore.UserTable,
			Columns: []string{usertostore.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertostore.UserTable,
			Columns: []string{usertostore.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utsu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertostore.StoreTable,
			Columns: []string{usertostore.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertostore.StoreTable,
			Columns: []string{usertostore.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertostore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utsu.mutation.done = true
	return n, nil
}

// UserToStoreUpdateOne is the builder for updating a single UserToStore entity.
type UserToStoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserToStoreMutation
}

// SetUserID sets the "user_id" field.
func (utsuo *UserToStoreUpdateOne) SetUserID(i int) *UserToStoreUpdateOne {
	utsuo.mutation.SetUserID(i)
	return utsuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utsuo *UserToStoreUpdateOne) SetNillableUserID(i *int) *UserToStoreUpdateOne {
	if i != nil {
		utsuo.SetUserID(*i)
	}
	return utsuo
}

// SetStoreID sets the "store_id" field.
func (utsuo *UserToStoreUpdateOne) SetStoreID(i int) *UserToStoreUpdateOne {
	utsuo.mutation.SetStoreID(i)
	return utsuo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (utsuo *UserToStoreUpdateOne) SetNillableStoreID(i *int) *UserToStoreUpdateOne {
	if i != nil {
		utsuo.SetStoreID(*i)
	}
	return utsuo
}

// SetStoreName sets the "store_name" field.
func (utsuo *UserToStoreUpdateOne) SetStoreName(i int) *UserToStoreUpdateOne {
	utsuo.mutation.ResetStoreName()
	utsuo.mutation.SetStoreName(i)
	return utsuo
}

// SetNillableStoreName sets the "store_name" field if the given value is not nil.
func (utsuo *UserToStoreUpdateOne) SetNillableStoreName(i *int) *UserToStoreUpdateOne {
	if i != nil {
		utsuo.SetStoreName(*i)
	}
	return utsuo
}

// AddStoreName adds i to the "store_name" field.
func (utsuo *UserToStoreUpdateOne) AddStoreName(i int) *UserToStoreUpdateOne {
	utsuo.mutation.AddStoreName(i)
	return utsuo
}

// ClearStoreName clears the value of the "store_name" field.
func (utsuo *UserToStoreUpdateOne) ClearStoreName() *UserToStoreUpdateOne {
	utsuo.mutation.ClearStoreName()
	return utsuo
}

// SetClerkUserID sets the "clerk_user_id" field.
func (utsuo *UserToStoreUpdateOne) SetClerkUserID(s string) *UserToStoreUpdateOne {
	utsuo.mutation.SetClerkUserID(s)
	return utsuo
}

// SetNillableClerkUserID sets the "clerk_user_id" field if the given value is not nil.
func (utsuo *UserToStoreUpdateOne) SetNillableClerkUserID(s *string) *UserToStoreUpdateOne {
	if s != nil {
		utsuo.SetClerkUserID(*s)
	}
	return utsuo
}

// ClearClerkUserID clears the value of the "clerk_user_id" field.
func (utsuo *UserToStoreUpdateOne) ClearClerkUserID() *UserToStoreUpdateOne {
	utsuo.mutation.ClearClerkUserID()
	return utsuo
}

// SetPermissionLevel sets the "permission_level" field.
func (utsuo *UserToStoreUpdateOne) SetPermissionLevel(i int) *UserToStoreUpdateOne {
	utsuo.mutation.ResetPermissionLevel()
	utsuo.mutation.SetPermissionLevel(i)
	return utsuo
}

// SetNillablePermissionLevel sets the "permission_level" field if the given value is not nil.
func (utsuo *UserToStoreUpdateOne) SetNillablePermissionLevel(i *int) *UserToStoreUpdateOne {
	if i != nil {
		utsuo.SetPermissionLevel(*i)
	}
	return utsuo
}

// AddPermissionLevel adds i to the "permission_level" field.
func (utsuo *UserToStoreUpdateOne) AddPermissionLevel(i int) *UserToStoreUpdateOne {
	utsuo.mutation.AddPermissionLevel(i)
	return utsuo
}

// ClearPermissionLevel clears the value of the "permission_level" field.
func (utsuo *UserToStoreUpdateOne) ClearPermissionLevel() *UserToStoreUpdateOne {
	utsuo.mutation.ClearPermissionLevel()
	return utsuo
}

// SetJoinedAt sets the "joined_at" field.
func (utsuo *UserToStoreUpdateOne) SetJoinedAt(i int) *UserToStoreUpdateOne {
	utsuo.mutation.ResetJoinedAt()
	utsuo.mutation.SetJoinedAt(i)
	return utsuo
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (utsuo *UserToStoreUpdateOne) SetNillableJoinedAt(i *int) *UserToStoreUpdateOne {
	if i != nil {
		utsuo.SetJoinedAt(*i)
	}
	return utsuo
}

// AddJoinedAt adds i to the "joined_at" field.
func (utsuo *UserToStoreUpdateOne) AddJoinedAt(i int) *UserToStoreUpdateOne {
	utsuo.mutation.AddJoinedAt(i)
	return utsuo
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (utsuo *UserToStoreUpdateOne) ClearJoinedAt() *UserToStoreUpdateOne {
	utsuo.mutation.ClearJoinedAt()
	return utsuo
}

// SetUser sets the "user" edge to the User entity.
func (utsuo *UserToStoreUpdateOne) SetUser(u *User) *UserToStoreUpdateOne {
	return utsuo.SetUserID(u.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (utsuo *UserToStoreUpdateOne) SetStore(s *Store) *UserToStoreUpdateOne {
	return utsuo.SetStoreID(s.ID)
}

// Mutation returns the UserToStoreMutation object of the builder.
func (utsuo *UserToStoreUpdateOne) Mutation() *UserToStoreMutation {
	return utsuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utsuo *UserToStoreUpdateOne) ClearUser() *UserToStoreUpdateOne {
	utsuo.mutation.ClearUser()
	return utsuo
}

// ClearStore clears the "store" edge to the Store entity.
func (utsuo *UserToStoreUpdateOne) ClearStore() *UserToStoreUpdateOne {
	utsuo.mutation.ClearStore()
	return utsuo
}

// Where appends a list predicates to the UserToStoreUpdate builder.
func (utsuo *UserToStoreUpdateOne) Where(ps ...predicate.UserToStore) *UserToStoreUpdateOne {
	utsuo.mutation.Where(ps...)
	return utsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utsuo *UserToStoreUpdateOne) Select(field string, fields ...string) *UserToStoreUpdateOne {
	utsuo.fields = append([]string{field}, fields...)
	return utsuo
}

// Save executes the query and returns the updated UserToStore entity.
func (utsuo *UserToStoreUpdateOne) Save(ctx context.Context) (*UserToStore, error) {
	return withHooks(ctx, utsuo.sqlSave, utsuo.mutation, utsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utsuo *UserToStoreUpdateOne) SaveX(ctx context.Context) *UserToStore {
	node, err := utsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utsuo *UserToStoreUpdateOne) Exec(ctx context.Context) error {
	_, err := utsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utsuo *UserToStoreUpdateOne) ExecX(ctx context.Context) {
	if err := utsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utsuo *UserToStoreUpdateOne) check() error {
	if _, ok := utsuo.mutation.UserID(); utsuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserToStore.user"`)
	}
	if _, ok := utsuo.mutation.StoreID(); utsuo.mutation.StoreCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserToStore.store"`)
	}
	return nil
}

func (utsuo *UserToStoreUpdateOne) sqlSave(ctx context.Context) (_node *UserToStore, err error) {
	if err := utsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertostore.Table, usertostore.Columns, sqlgraph.NewFieldSpec(usertostore.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(usertostore.FieldStoreID, field.TypeInt))
	if id, ok := utsuo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "UserToStore.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := utsuo.mutation.StoreID(); !ok {
		return nil, &ValidationError{Name: "store_id", err: errors.New(`ent: missing "UserToStore.store_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := utsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !usertostore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := utsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utsuo.mutation.StoreName(); ok {
		_spec.SetField(usertostore.FieldStoreName, field.TypeInt, value)
	}
	if value, ok := utsuo.mutation.AddedStoreName(); ok {
		_spec.AddField(usertostore.FieldStoreName, field.TypeInt, value)
	}
	if utsuo.mutation.StoreNameCleared() {
		_spec.ClearField(usertostore.FieldStoreName, field.TypeInt)
	}
	if value, ok := utsuo.mutation.ClerkUserID(); ok {
		_spec.SetField(usertostore.FieldClerkUserID, field.TypeString, value)
	}
	if utsuo.mutation.ClerkUserIDCleared() {
		_spec.ClearField(usertostore.FieldClerkUserID, field.TypeString)
	}
	if value, ok := utsuo.mutation.PermissionLevel(); ok {
		_spec.SetField(usertostore.FieldPermissionLevel, field.TypeInt, value)
	}
	if value, ok := utsuo.mutation.AddedPermissionLevel(); ok {
		_spec.AddField(usertostore.FieldPermissionLevel, field.TypeInt, value)
	}
	if utsuo.mutation.PermissionLevelCleared() {
		_spec.ClearField(usertostore.FieldPermissionLevel, field.TypeInt)
	}
	if value, ok := utsuo.mutation.JoinedAt(); ok {
		_spec.SetField(usertostore.FieldJoinedAt, field.TypeInt, value)
	}
	if value, ok := utsuo.mutation.AddedJoinedAt(); ok {
		_spec.AddField(usertostore.FieldJoinedAt, field.TypeInt, value)
	}
	if utsuo.mutation.JoinedAtCleared() {
		_spec.ClearField(usertostore.FieldJoinedAt, field.TypeInt)
	}
	if utsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertostore.UserTable,
			Columns: []string{usertostore.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertostore.UserTable,
			Columns: []string{usertostore.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utsuo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertostore.StoreTable,
			Columns: []string{usertostore.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsuo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertostore.StoreTable,
			Columns: []string{usertostore.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserToStore{config: utsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertostore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utsuo.mutation.done = true
	return _node, nil
}
