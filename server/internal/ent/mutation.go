// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hktrib/RetailGo/internal/ent/category"
	"github.com/hktrib/RetailGo/internal/ent/categoryitem"
	"github.com/hktrib/RetailGo/internal/ent/clerkuser_store"
	"github.com/hktrib/RetailGo/internal/ent/item"
	"github.com/hktrib/RetailGo/internal/ent/predicate"
	"github.com/hktrib/RetailGo/internal/ent/store"
	"github.com/hktrib/RetailGo/internal/ent/user"
	"github.com/hktrib/RetailGo/internal/ent/usertostore"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCategory       = "Category"
	TypeCategoryItem   = "CategoryItem"
	TypeClerkUserStore = "ClerkUser_Store"
	TypeItem           = "Item"
	TypeStore          = "Store"
	TypeUser           = "User"
	TypeUserToStore    = "UserToStore"
)

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	photo         *[]byte
	clearedFields map[string]struct{}
	items         map[int]struct{}
	removeditems  map[int]struct{}
	cleareditems  bool
	store         *int
	clearedstore  bool
	done          bool
	oldValue      func(context.Context) (*Category, error)
	predicates    []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id int) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Category entities.
func (m *CategoryMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Category.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// SetPhoto sets the "photo" field.
func (m *CategoryMutation) SetPhoto(b []byte) {
	m.photo = &b
}

// Photo returns the value of the "photo" field in the mutation.
func (m *CategoryMutation) Photo() (r []byte, exists bool) {
	v := m.photo
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoto returns the old "photo" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldPhoto(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoto is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoto requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoto: %w", err)
	}
	return oldValue.Photo, nil
}

// ResetPhoto resets all changes to the "photo" field.
func (m *CategoryMutation) ResetPhoto() {
	m.photo = nil
}

// SetStoreID sets the "store_id" field.
func (m *CategoryMutation) SetStoreID(i int) {
	m.store = &i
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *CategoryMutation) StoreID() (r int, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldStoreID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *CategoryMutation) ResetStoreID() {
	m.store = nil
}

// AddItemIDs adds the "items" edge to the Item entity by ids.
func (m *CategoryMutation) AddItemIDs(ids ...int) {
	if m.items == nil {
		m.items = make(map[int]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the Item entity.
func (m *CategoryMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the Item entity was cleared.
func (m *CategoryMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the Item entity by IDs.
func (m *CategoryMutation) RemoveItemIDs(ids ...int) {
	if m.removeditems == nil {
		m.removeditems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the Item entity.
func (m *CategoryMutation) RemovedItemsIDs() (ids []int) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *CategoryMutation) ItemsIDs() (ids []int) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *CategoryMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// ClearStore clears the "store" edge to the Store entity.
func (m *CategoryMutation) ClearStore() {
	m.clearedstore = true
	m.clearedFields[category.FieldStoreID] = struct{}{}
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *CategoryMutation) StoreCleared() bool {
	return m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *CategoryMutation) StoreIDs() (ids []int) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *CategoryMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Category, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	if m.photo != nil {
		fields = append(fields, category.FieldPhoto)
	}
	if m.store != nil {
		fields = append(fields, category.FieldStoreID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldName:
		return m.Name()
	case category.FieldPhoto:
		return m.Photo()
	case category.FieldStoreID:
		return m.StoreID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldName:
		return m.OldName(ctx)
	case category.FieldPhoto:
		return m.OldPhoto(ctx)
	case category.FieldStoreID:
		return m.OldStoreID(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case category.FieldPhoto:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoto(v)
		return nil
	case category.FieldStoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldName:
		m.ResetName()
		return nil
	case category.FieldPhoto:
		m.ResetPhoto()
		return nil
	case category.FieldStoreID:
		m.ResetStoreID()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.items != nil {
		edges = append(edges, category.EdgeItems)
	}
	if m.store != nil {
		edges = append(edges, category.EdgeStore)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeditems != nil {
		edges = append(edges, category.EdgeItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareditems {
		edges = append(edges, category.EdgeItems)
	}
	if m.clearedstore {
		edges = append(edges, category.EdgeStore)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeItems:
		return m.cleareditems
	case category.EdgeStore:
		return m.clearedstore
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	case category.EdgeStore:
		m.ClearStore()
		return nil
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeItems:
		m.ResetItems()
		return nil
	case category.EdgeStore:
		m.ResetStore()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// CategoryItemMutation represents an operation that mutates the CategoryItem nodes in the graph.
type CategoryItemMutation struct {
	config
	op              Op
	typ             string
	clearedFields   map[string]struct{}
	category        *int
	clearedcategory bool
	item            *int
	cleareditem     bool
	done            bool
	oldValue        func(context.Context) (*CategoryItem, error)
	predicates      []predicate.CategoryItem
}

var _ ent.Mutation = (*CategoryItemMutation)(nil)

// categoryitemOption allows management of the mutation configuration using functional options.
type categoryitemOption func(*CategoryItemMutation)

// newCategoryItemMutation creates new mutation for the CategoryItem entity.
func newCategoryItemMutation(c config, op Op, opts ...categoryitemOption) *CategoryItemMutation {
	m := &CategoryItemMutation{
		config:        c,
		op:            op,
		typ:           TypeCategoryItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetCategoryID sets the "category_id" field.
func (m *CategoryItemMutation) SetCategoryID(i int) {
	m.category = &i
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *CategoryItemMutation) CategoryID() (r int, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *CategoryItemMutation) ResetCategoryID() {
	m.category = nil
}

// SetItemID sets the "item_id" field.
func (m *CategoryItemMutation) SetItemID(i int) {
	m.item = &i
}

// ItemID returns the value of the "item_id" field in the mutation.
func (m *CategoryItemMutation) ItemID() (r int, exists bool) {
	v := m.item
	if v == nil {
		return
	}
	return *v, true
}

// ResetItemID resets all changes to the "item_id" field.
func (m *CategoryItemMutation) ResetItemID() {
	m.item = nil
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *CategoryItemMutation) ClearCategory() {
	m.clearedcategory = true
	m.clearedFields[categoryitem.FieldCategoryID] = struct{}{}
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *CategoryItemMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *CategoryItemMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *CategoryItemMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// ClearItem clears the "item" edge to the Item entity.
func (m *CategoryItemMutation) ClearItem() {
	m.cleareditem = true
	m.clearedFields[categoryitem.FieldItemID] = struct{}{}
}

// ItemCleared reports if the "item" edge to the Item entity was cleared.
func (m *CategoryItemMutation) ItemCleared() bool {
	return m.cleareditem
}

// ItemIDs returns the "item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ItemID instead. It exists only for internal usage by the builders.
func (m *CategoryItemMutation) ItemIDs() (ids []int) {
	if id := m.item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetItem resets all changes to the "item" edge.
func (m *CategoryItemMutation) ResetItem() {
	m.item = nil
	m.cleareditem = false
}

// Where appends a list predicates to the CategoryItemMutation builder.
func (m *CategoryItemMutation) Where(ps ...predicate.CategoryItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CategoryItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CategoryItem).
func (m *CategoryItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryItemMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.category != nil {
		fields = append(fields, categoryitem.FieldCategoryID)
	}
	if m.item != nil {
		fields = append(fields, categoryitem.FieldItemID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case categoryitem.FieldCategoryID:
		return m.CategoryID()
	case categoryitem.FieldItemID:
		return m.ItemID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema CategoryItem does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case categoryitem.FieldCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	case categoryitem.FieldItemID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemID(v)
		return nil
	}
	return fmt.Errorf("unknown CategoryItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryItemMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CategoryItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CategoryItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryItemMutation) ResetField(name string) error {
	switch name {
	case categoryitem.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	case categoryitem.FieldItemID:
		m.ResetItemID()
		return nil
	}
	return fmt.Errorf("unknown CategoryItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.category != nil {
		edges = append(edges, categoryitem.EdgeCategory)
	}
	if m.item != nil {
		edges = append(edges, categoryitem.EdgeItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case categoryitem.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	case categoryitem.EdgeItem:
		if id := m.item; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcategory {
		edges = append(edges, categoryitem.EdgeCategory)
	}
	if m.cleareditem {
		edges = append(edges, categoryitem.EdgeItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryItemMutation) EdgeCleared(name string) bool {
	switch name {
	case categoryitem.EdgeCategory:
		return m.clearedcategory
	case categoryitem.EdgeItem:
		return m.cleareditem
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryItemMutation) ClearEdge(name string) error {
	switch name {
	case categoryitem.EdgeCategory:
		m.ClearCategory()
		return nil
	case categoryitem.EdgeItem:
		m.ClearItem()
		return nil
	}
	return fmt.Errorf("unknown CategoryItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryItemMutation) ResetEdge(name string) error {
	switch name {
	case categoryitem.EdgeCategory:
		m.ResetCategory()
		return nil
	case categoryitem.EdgeItem:
		m.ResetItem()
		return nil
	}
	return fmt.Errorf("unknown CategoryItem edge %s", name)
}

// ClerkUserStoreMutation represents an operation that mutates the ClerkUser_Store nodes in the graph.
type ClerkUserStoreMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clerk_id      *string
	store_id      *int
	addstore_id   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ClerkUser_Store, error)
	predicates    []predicate.ClerkUser_Store
}

var _ ent.Mutation = (*ClerkUserStoreMutation)(nil)

// clerkuserStoreOption allows management of the mutation configuration using functional options.
type clerkuserStoreOption func(*ClerkUserStoreMutation)

// newClerkUserStoreMutation creates new mutation for the ClerkUser_Store entity.
func newClerkUserStoreMutation(c config, op Op, opts ...clerkuserStoreOption) *ClerkUserStoreMutation {
	m := &ClerkUserStoreMutation{
		config:        c,
		op:            op,
		typ:           TypeClerkUserStore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClerkUser_StoreID sets the ID field of the mutation.
func withClerkUser_StoreID(id int) clerkuserStoreOption {
	return func(m *ClerkUserStoreMutation) {
		var (
			err   error
			once  sync.Once
			value *ClerkUser_Store
		)
		m.oldValue = func(ctx context.Context) (*ClerkUser_Store, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ClerkUser_Store.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClerkUser_Store sets the old ClerkUser_Store of the mutation.
func withClerkUser_Store(node *ClerkUser_Store) clerkuserStoreOption {
	return func(m *ClerkUserStoreMutation) {
		m.oldValue = func(context.Context) (*ClerkUser_Store, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClerkUserStoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClerkUserStoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClerkUserStoreMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClerkUserStoreMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ClerkUser_Store.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetClerkID sets the "clerk_id" field.
func (m *ClerkUserStoreMutation) SetClerkID(s string) {
	m.clerk_id = &s
}

// ClerkID returns the value of the "clerk_id" field in the mutation.
func (m *ClerkUserStoreMutation) ClerkID() (r string, exists bool) {
	v := m.clerk_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClerkID returns the old "clerk_id" field's value of the ClerkUser_Store entity.
// If the ClerkUser_Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClerkUserStoreMutation) OldClerkID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClerkID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClerkID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClerkID: %w", err)
	}
	return oldValue.ClerkID, nil
}

// ResetClerkID resets all changes to the "clerk_id" field.
func (m *ClerkUserStoreMutation) ResetClerkID() {
	m.clerk_id = nil
}

// SetStoreID sets the "store_id" field.
func (m *ClerkUserStoreMutation) SetStoreID(i int) {
	m.store_id = &i
	m.addstore_id = nil
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *ClerkUserStoreMutation) StoreID() (r int, exists bool) {
	v := m.store_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the ClerkUser_Store entity.
// If the ClerkUser_Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClerkUserStoreMutation) OldStoreID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// AddStoreID adds i to the "store_id" field.
func (m *ClerkUserStoreMutation) AddStoreID(i int) {
	if m.addstore_id != nil {
		*m.addstore_id += i
	} else {
		m.addstore_id = &i
	}
}

// AddedStoreID returns the value that was added to the "store_id" field in this mutation.
func (m *ClerkUserStoreMutation) AddedStoreID() (r int, exists bool) {
	v := m.addstore_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *ClerkUserStoreMutation) ResetStoreID() {
	m.store_id = nil
	m.addstore_id = nil
}

// Where appends a list predicates to the ClerkUserStoreMutation builder.
func (m *ClerkUserStoreMutation) Where(ps ...predicate.ClerkUser_Store) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClerkUserStoreMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClerkUserStoreMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ClerkUser_Store, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClerkUserStoreMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClerkUserStoreMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ClerkUser_Store).
func (m *ClerkUserStoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClerkUserStoreMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.clerk_id != nil {
		fields = append(fields, clerkuser_store.FieldClerkID)
	}
	if m.store_id != nil {
		fields = append(fields, clerkuser_store.FieldStoreID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClerkUserStoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case clerkuser_store.FieldClerkID:
		return m.ClerkID()
	case clerkuser_store.FieldStoreID:
		return m.StoreID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClerkUserStoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case clerkuser_store.FieldClerkID:
		return m.OldClerkID(ctx)
	case clerkuser_store.FieldStoreID:
		return m.OldStoreID(ctx)
	}
	return nil, fmt.Errorf("unknown ClerkUser_Store field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClerkUserStoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case clerkuser_store.FieldClerkID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClerkID(v)
		return nil
	case clerkuser_store.FieldStoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	}
	return fmt.Errorf("unknown ClerkUser_Store field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClerkUserStoreMutation) AddedFields() []string {
	var fields []string
	if m.addstore_id != nil {
		fields = append(fields, clerkuser_store.FieldStoreID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClerkUserStoreMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case clerkuser_store.FieldStoreID:
		return m.AddedStoreID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClerkUserStoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	case clerkuser_store.FieldStoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStoreID(v)
		return nil
	}
	return fmt.Errorf("unknown ClerkUser_Store numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClerkUserStoreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClerkUserStoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClerkUserStoreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ClerkUser_Store nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClerkUserStoreMutation) ResetField(name string) error {
	switch name {
	case clerkuser_store.FieldClerkID:
		m.ResetClerkID()
		return nil
	case clerkuser_store.FieldStoreID:
		m.ResetStoreID()
		return nil
	}
	return fmt.Errorf("unknown ClerkUser_Store field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClerkUserStoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClerkUserStoreMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClerkUserStoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClerkUserStoreMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClerkUserStoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClerkUserStoreMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClerkUserStoreMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ClerkUser_Store unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClerkUserStoreMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ClerkUser_Store edge %s", name)
}

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	photo             *[]byte
	quantity          *int
	addquantity       *int
	price             *float64
	addprice          *float64
	stripe_price_id   *string
	stripe_product_id *string
	category_name     *string
	number_sold       *int
	addnumber_sold    *int
	date_last_sold    *string
	clearedFields     map[string]struct{}
	category          map[int]struct{}
	removedcategory   map[int]struct{}
	clearedcategory   bool
	store             *int
	clearedstore      bool
	done              bool
	oldValue          func(context.Context) (*Item, error)
	predicates        []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id int) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Item entities.
func (m *ItemMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Item.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ItemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ItemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ItemMutation) ResetName() {
	m.name = nil
}

// SetPhoto sets the "photo" field.
func (m *ItemMutation) SetPhoto(b []byte) {
	m.photo = &b
}

// Photo returns the value of the "photo" field in the mutation.
func (m *ItemMutation) Photo() (r []byte, exists bool) {
	v := m.photo
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoto returns the old "photo" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldPhoto(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoto is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoto requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoto: %w", err)
	}
	return oldValue.Photo, nil
}

// ResetPhoto resets all changes to the "photo" field.
func (m *ItemMutation) ResetPhoto() {
	m.photo = nil
}

// SetQuantity sets the "quantity" field.
func (m *ItemMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *ItemMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *ItemMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *ItemMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *ItemMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetPrice sets the "price" field.
func (m *ItemMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *ItemMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *ItemMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *ItemMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *ItemMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetStoreID sets the "store_id" field.
func (m *ItemMutation) SetStoreID(i int) {
	m.store = &i
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *ItemMutation) StoreID() (r int, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldStoreID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *ItemMutation) ResetStoreID() {
	m.store = nil
}

// SetStripePriceID sets the "stripe_price_id" field.
func (m *ItemMutation) SetStripePriceID(s string) {
	m.stripe_price_id = &s
}

// StripePriceID returns the value of the "stripe_price_id" field in the mutation.
func (m *ItemMutation) StripePriceID() (r string, exists bool) {
	v := m.stripe_price_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStripePriceID returns the old "stripe_price_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldStripePriceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStripePriceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStripePriceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStripePriceID: %w", err)
	}
	return oldValue.StripePriceID, nil
}

// ResetStripePriceID resets all changes to the "stripe_price_id" field.
func (m *ItemMutation) ResetStripePriceID() {
	m.stripe_price_id = nil
}

// SetStripeProductID sets the "stripe_product_id" field.
func (m *ItemMutation) SetStripeProductID(s string) {
	m.stripe_product_id = &s
}

// StripeProductID returns the value of the "stripe_product_id" field in the mutation.
func (m *ItemMutation) StripeProductID() (r string, exists bool) {
	v := m.stripe_product_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStripeProductID returns the old "stripe_product_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldStripeProductID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStripeProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStripeProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStripeProductID: %w", err)
	}
	return oldValue.StripeProductID, nil
}

// ResetStripeProductID resets all changes to the "stripe_product_id" field.
func (m *ItemMutation) ResetStripeProductID() {
	m.stripe_product_id = nil
}

// SetCategoryName sets the "category_name" field.
func (m *ItemMutation) SetCategoryName(s string) {
	m.category_name = &s
}

// CategoryName returns the value of the "category_name" field in the mutation.
func (m *ItemMutation) CategoryName() (r string, exists bool) {
	v := m.category_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryName returns the old "category_name" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldCategoryName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryName: %w", err)
	}
	return oldValue.CategoryName, nil
}

// ResetCategoryName resets all changes to the "category_name" field.
func (m *ItemMutation) ResetCategoryName() {
	m.category_name = nil
}

// SetNumberSold sets the "number_sold" field.
func (m *ItemMutation) SetNumberSold(i int) {
	m.number_sold = &i
	m.addnumber_sold = nil
}

// NumberSold returns the value of the "number_sold" field in the mutation.
func (m *ItemMutation) NumberSold() (r int, exists bool) {
	v := m.number_sold
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberSold returns the old "number_sold" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldNumberSold(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberSold is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberSold requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberSold: %w", err)
	}
	return oldValue.NumberSold, nil
}

// AddNumberSold adds i to the "number_sold" field.
func (m *ItemMutation) AddNumberSold(i int) {
	if m.addnumber_sold != nil {
		*m.addnumber_sold += i
	} else {
		m.addnumber_sold = &i
	}
}

// AddedNumberSold returns the value that was added to the "number_sold" field in this mutation.
func (m *ItemMutation) AddedNumberSold() (r int, exists bool) {
	v := m.addnumber_sold
	if v == nil {
		return
	}
	return *v, true
}

// ClearNumberSold clears the value of the "number_sold" field.
func (m *ItemMutation) ClearNumberSold() {
	m.number_sold = nil
	m.addnumber_sold = nil
	m.clearedFields[item.FieldNumberSold] = struct{}{}
}

// NumberSoldCleared returns if the "number_sold" field was cleared in this mutation.
func (m *ItemMutation) NumberSoldCleared() bool {
	_, ok := m.clearedFields[item.FieldNumberSold]
	return ok
}

// ResetNumberSold resets all changes to the "number_sold" field.
func (m *ItemMutation) ResetNumberSold() {
	m.number_sold = nil
	m.addnumber_sold = nil
	delete(m.clearedFields, item.FieldNumberSold)
}

// SetDateLastSold sets the "date_last_sold" field.
func (m *ItemMutation) SetDateLastSold(s string) {
	m.date_last_sold = &s
}

// DateLastSold returns the value of the "date_last_sold" field in the mutation.
func (m *ItemMutation) DateLastSold() (r string, exists bool) {
	v := m.date_last_sold
	if v == nil {
		return
	}
	return *v, true
}

// OldDateLastSold returns the old "date_last_sold" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldDateLastSold(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateLastSold is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateLastSold requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateLastSold: %w", err)
	}
	return oldValue.DateLastSold, nil
}

// ClearDateLastSold clears the value of the "date_last_sold" field.
func (m *ItemMutation) ClearDateLastSold() {
	m.date_last_sold = nil
	m.clearedFields[item.FieldDateLastSold] = struct{}{}
}

// DateLastSoldCleared returns if the "date_last_sold" field was cleared in this mutation.
func (m *ItemMutation) DateLastSoldCleared() bool {
	_, ok := m.clearedFields[item.FieldDateLastSold]
	return ok
}

// ResetDateLastSold resets all changes to the "date_last_sold" field.
func (m *ItemMutation) ResetDateLastSold() {
	m.date_last_sold = nil
	delete(m.clearedFields, item.FieldDateLastSold)
}

// AddCategoryIDs adds the "category" edge to the Category entity by ids.
func (m *ItemMutation) AddCategoryIDs(ids ...int) {
	if m.category == nil {
		m.category = make(map[int]struct{})
	}
	for i := range ids {
		m.category[ids[i]] = struct{}{}
	}
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *ItemMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *ItemMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// RemoveCategoryIDs removes the "category" edge to the Category entity by IDs.
func (m *ItemMutation) RemoveCategoryIDs(ids ...int) {
	if m.removedcategory == nil {
		m.removedcategory = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.category, ids[i])
		m.removedcategory[ids[i]] = struct{}{}
	}
}

// RemovedCategory returns the removed IDs of the "category" edge to the Category entity.
func (m *ItemMutation) RemovedCategoryIDs() (ids []int) {
	for id := range m.removedcategory {
		ids = append(ids, id)
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
func (m *ItemMutation) CategoryIDs() (ids []int) {
	for id := range m.category {
		ids = append(ids, id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *ItemMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
	m.removedcategory = nil
}

// ClearStore clears the "store" edge to the Store entity.
func (m *ItemMutation) ClearStore() {
	m.clearedstore = true
	m.clearedFields[item.FieldStoreID] = struct{}{}
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *ItemMutation) StoreCleared() bool {
	return m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *ItemMutation) StoreIDs() (ids []int) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *ItemMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// Where appends a list predicates to the ItemMutation builder.
func (m *ItemMutation) Where(ps ...predicate.Item) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Item, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.name != nil {
		fields = append(fields, item.FieldName)
	}
	if m.photo != nil {
		fields = append(fields, item.FieldPhoto)
	}
	if m.quantity != nil {
		fields = append(fields, item.FieldQuantity)
	}
	if m.price != nil {
		fields = append(fields, item.FieldPrice)
	}
	if m.store != nil {
		fields = append(fields, item.FieldStoreID)
	}
	if m.stripe_price_id != nil {
		fields = append(fields, item.FieldStripePriceID)
	}
	if m.stripe_product_id != nil {
		fields = append(fields, item.FieldStripeProductID)
	}
	if m.category_name != nil {
		fields = append(fields, item.FieldCategoryName)
	}
	if m.number_sold != nil {
		fields = append(fields, item.FieldNumberSold)
	}
	if m.date_last_sold != nil {
		fields = append(fields, item.FieldDateLastSold)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldName:
		return m.Name()
	case item.FieldPhoto:
		return m.Photo()
	case item.FieldQuantity:
		return m.Quantity()
	case item.FieldPrice:
		return m.Price()
	case item.FieldStoreID:
		return m.StoreID()
	case item.FieldStripePriceID:
		return m.StripePriceID()
	case item.FieldStripeProductID:
		return m.StripeProductID()
	case item.FieldCategoryName:
		return m.CategoryName()
	case item.FieldNumberSold:
		return m.NumberSold()
	case item.FieldDateLastSold:
		return m.DateLastSold()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldName:
		return m.OldName(ctx)
	case item.FieldPhoto:
		return m.OldPhoto(ctx)
	case item.FieldQuantity:
		return m.OldQuantity(ctx)
	case item.FieldPrice:
		return m.OldPrice(ctx)
	case item.FieldStoreID:
		return m.OldStoreID(ctx)
	case item.FieldStripePriceID:
		return m.OldStripePriceID(ctx)
	case item.FieldStripeProductID:
		return m.OldStripeProductID(ctx)
	case item.FieldCategoryName:
		return m.OldCategoryName(ctx)
	case item.FieldNumberSold:
		return m.OldNumberSold(ctx)
	case item.FieldDateLastSold:
		return m.OldDateLastSold(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case item.FieldPhoto:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoto(v)
		return nil
	case item.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case item.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case item.FieldStoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case item.FieldStripePriceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStripePriceID(v)
		return nil
	case item.FieldStripeProductID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStripeProductID(v)
		return nil
	case item.FieldCategoryName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryName(v)
		return nil
	case item.FieldNumberSold:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberSold(v)
		return nil
	case item.FieldDateLastSold:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateLastSold(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, item.FieldQuantity)
	}
	if m.addprice != nil {
		fields = append(fields, item.FieldPrice)
	}
	if m.addnumber_sold != nil {
		fields = append(fields, item.FieldNumberSold)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case item.FieldQuantity:
		return m.AddedQuantity()
	case item.FieldPrice:
		return m.AddedPrice()
	case item.FieldNumberSold:
		return m.AddedNumberSold()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case item.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case item.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case item.FieldNumberSold:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberSold(v)
		return nil
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(item.FieldNumberSold) {
		fields = append(fields, item.FieldNumberSold)
	}
	if m.FieldCleared(item.FieldDateLastSold) {
		fields = append(fields, item.FieldDateLastSold)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	switch name {
	case item.FieldNumberSold:
		m.ClearNumberSold()
		return nil
	case item.FieldDateLastSold:
		m.ClearDateLastSold()
		return nil
	}
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldName:
		m.ResetName()
		return nil
	case item.FieldPhoto:
		m.ResetPhoto()
		return nil
	case item.FieldQuantity:
		m.ResetQuantity()
		return nil
	case item.FieldPrice:
		m.ResetPrice()
		return nil
	case item.FieldStoreID:
		m.ResetStoreID()
		return nil
	case item.FieldStripePriceID:
		m.ResetStripePriceID()
		return nil
	case item.FieldStripeProductID:
		m.ResetStripeProductID()
		return nil
	case item.FieldCategoryName:
		m.ResetCategoryName()
		return nil
	case item.FieldNumberSold:
		m.ResetNumberSold()
		return nil
	case item.FieldDateLastSold:
		m.ResetDateLastSold()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.category != nil {
		edges = append(edges, item.EdgeCategory)
	}
	if m.store != nil {
		edges = append(edges, item.EdgeStore)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeCategory:
		ids := make([]ent.Value, 0, len(m.category))
		for id := range m.category {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcategory != nil {
		edges = append(edges, item.EdgeCategory)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeCategory:
		ids := make([]ent.Value, 0, len(m.removedcategory))
		for id := range m.removedcategory {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcategory {
		edges = append(edges, item.EdgeCategory)
	}
	if m.clearedstore {
		edges = append(edges, item.EdgeStore)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	switch name {
	case item.EdgeCategory:
		return m.clearedcategory
	case item.EdgeStore:
		return m.clearedstore
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	switch name {
	case item.EdgeStore:
		m.ClearStore()
		return nil
	}
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	switch name {
	case item.EdgeCategory:
		m.ResetCategory()
		return nil
	case item.EdgeStore:
		m.ResetStore()
		return nil
	}
	return fmt.Errorf("unknown Item edge %s", name)
}

// StoreMutation represents an operation that mutates the Store nodes in the graph.
type StoreMutation struct {
	config
	op                Op
	typ               string
	id                *int
	uuid              *string
	store_name        *string
	created_by        *string
	owner_email       *string
	store_address     *string
	store_phone       *string
	store_type        *string
	clearedFields     map[string]struct{}
	items             map[int]struct{}
	removeditems      map[int]struct{}
	cleareditems      bool
	categories        map[int]struct{}
	removedcategories map[int]struct{}
	clearedcategories bool
	user              map[int]struct{}
	removeduser       map[int]struct{}
	cleareduser       bool
	done              bool
	oldValue          func(context.Context) (*Store, error)
	predicates        []predicate.Store
}

var _ ent.Mutation = (*StoreMutation)(nil)

// storeOption allows management of the mutation configuration using functional options.
type storeOption func(*StoreMutation)

// newStoreMutation creates new mutation for the Store entity.
func newStoreMutation(c config, op Op, opts ...storeOption) *StoreMutation {
	m := &StoreMutation{
		config:        c,
		op:            op,
		typ:           TypeStore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStoreID sets the ID field of the mutation.
func withStoreID(id int) storeOption {
	return func(m *StoreMutation) {
		var (
			err   error
			once  sync.Once
			value *Store
		)
		m.oldValue = func(ctx context.Context) (*Store, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Store.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStore sets the old Store of the mutation.
func withStore(node *Store) storeOption {
	return func(m *StoreMutation) {
		m.oldValue = func(context.Context) (*Store, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Store entities.
func (m *StoreMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StoreMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StoreMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Store.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "uuid" field.
func (m *StoreMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *StoreMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *StoreMutation) ResetUUID() {
	m.uuid = nil
}

// SetStoreName sets the "store_name" field.
func (m *StoreMutation) SetStoreName(s string) {
	m.store_name = &s
}

// StoreName returns the value of the "store_name" field in the mutation.
func (m *StoreMutation) StoreName() (r string, exists bool) {
	v := m.store_name
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreName returns the old "store_name" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldStoreName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreName: %w", err)
	}
	return oldValue.StoreName, nil
}

// ResetStoreName resets all changes to the "store_name" field.
func (m *StoreMutation) ResetStoreName() {
	m.store_name = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *StoreMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *StoreMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *StoreMutation) ResetCreatedBy() {
	m.created_by = nil
}

// SetOwnerEmail sets the "owner_email" field.
func (m *StoreMutation) SetOwnerEmail(s string) {
	m.owner_email = &s
}

// OwnerEmail returns the value of the "owner_email" field in the mutation.
func (m *StoreMutation) OwnerEmail() (r string, exists bool) {
	v := m.owner_email
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerEmail returns the old "owner_email" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldOwnerEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerEmail: %w", err)
	}
	return oldValue.OwnerEmail, nil
}

// ClearOwnerEmail clears the value of the "owner_email" field.
func (m *StoreMutation) ClearOwnerEmail() {
	m.owner_email = nil
	m.clearedFields[store.FieldOwnerEmail] = struct{}{}
}

// OwnerEmailCleared returns if the "owner_email" field was cleared in this mutation.
func (m *StoreMutation) OwnerEmailCleared() bool {
	_, ok := m.clearedFields[store.FieldOwnerEmail]
	return ok
}

// ResetOwnerEmail resets all changes to the "owner_email" field.
func (m *StoreMutation) ResetOwnerEmail() {
	m.owner_email = nil
	delete(m.clearedFields, store.FieldOwnerEmail)
}

// SetStoreAddress sets the "store_address" field.
func (m *StoreMutation) SetStoreAddress(s string) {
	m.store_address = &s
}

// StoreAddress returns the value of the "store_address" field in the mutation.
func (m *StoreMutation) StoreAddress() (r string, exists bool) {
	v := m.store_address
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreAddress returns the old "store_address" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldStoreAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreAddress: %w", err)
	}
	return oldValue.StoreAddress, nil
}

// ClearStoreAddress clears the value of the "store_address" field.
func (m *StoreMutation) ClearStoreAddress() {
	m.store_address = nil
	m.clearedFields[store.FieldStoreAddress] = struct{}{}
}

// StoreAddressCleared returns if the "store_address" field was cleared in this mutation.
func (m *StoreMutation) StoreAddressCleared() bool {
	_, ok := m.clearedFields[store.FieldStoreAddress]
	return ok
}

// ResetStoreAddress resets all changes to the "store_address" field.
func (m *StoreMutation) ResetStoreAddress() {
	m.store_address = nil
	delete(m.clearedFields, store.FieldStoreAddress)
}

// SetStorePhone sets the "store_phone" field.
func (m *StoreMutation) SetStorePhone(s string) {
	m.store_phone = &s
}

// StorePhone returns the value of the "store_phone" field in the mutation.
func (m *StoreMutation) StorePhone() (r string, exists bool) {
	v := m.store_phone
	if v == nil {
		return
	}
	return *v, true
}

// OldStorePhone returns the old "store_phone" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldStorePhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStorePhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStorePhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStorePhone: %w", err)
	}
	return oldValue.StorePhone, nil
}

// ClearStorePhone clears the value of the "store_phone" field.
func (m *StoreMutation) ClearStorePhone() {
	m.store_phone = nil
	m.clearedFields[store.FieldStorePhone] = struct{}{}
}

// StorePhoneCleared returns if the "store_phone" field was cleared in this mutation.
func (m *StoreMutation) StorePhoneCleared() bool {
	_, ok := m.clearedFields[store.FieldStorePhone]
	return ok
}

// ResetStorePhone resets all changes to the "store_phone" field.
func (m *StoreMutation) ResetStorePhone() {
	m.store_phone = nil
	delete(m.clearedFields, store.FieldStorePhone)
}

// SetStoreType sets the "store_type" field.
func (m *StoreMutation) SetStoreType(s string) {
	m.store_type = &s
}

// StoreType returns the value of the "store_type" field in the mutation.
func (m *StoreMutation) StoreType() (r string, exists bool) {
	v := m.store_type
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreType returns the old "store_type" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldStoreType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreType: %w", err)
	}
	return oldValue.StoreType, nil
}

// ClearStoreType clears the value of the "store_type" field.
func (m *StoreMutation) ClearStoreType() {
	m.store_type = nil
	m.clearedFields[store.FieldStoreType] = struct{}{}
}

// StoreTypeCleared returns if the "store_type" field was cleared in this mutation.
func (m *StoreMutation) StoreTypeCleared() bool {
	_, ok := m.clearedFields[store.FieldStoreType]
	return ok
}

// ResetStoreType resets all changes to the "store_type" field.
func (m *StoreMutation) ResetStoreType() {
	m.store_type = nil
	delete(m.clearedFields, store.FieldStoreType)
}

// AddItemIDs adds the "items" edge to the Item entity by ids.
func (m *StoreMutation) AddItemIDs(ids ...int) {
	if m.items == nil {
		m.items = make(map[int]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the Item entity.
func (m *StoreMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the Item entity was cleared.
func (m *StoreMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the Item entity by IDs.
func (m *StoreMutation) RemoveItemIDs(ids ...int) {
	if m.removeditems == nil {
		m.removeditems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the Item entity.
func (m *StoreMutation) RemovedItemsIDs() (ids []int) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *StoreMutation) ItemsIDs() (ids []int) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *StoreMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// AddCategoryIDs adds the "categories" edge to the Category entity by ids.
func (m *StoreMutation) AddCategoryIDs(ids ...int) {
	if m.categories == nil {
		m.categories = make(map[int]struct{})
	}
	for i := range ids {
		m.categories[ids[i]] = struct{}{}
	}
}

// ClearCategories clears the "categories" edge to the Category entity.
func (m *StoreMutation) ClearCategories() {
	m.clearedcategories = true
}

// CategoriesCleared reports if the "categories" edge to the Category entity was cleared.
func (m *StoreMutation) CategoriesCleared() bool {
	return m.clearedcategories
}

// RemoveCategoryIDs removes the "categories" edge to the Category entity by IDs.
func (m *StoreMutation) RemoveCategoryIDs(ids ...int) {
	if m.removedcategories == nil {
		m.removedcategories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.categories, ids[i])
		m.removedcategories[ids[i]] = struct{}{}
	}
}

// RemovedCategories returns the removed IDs of the "categories" edge to the Category entity.
func (m *StoreMutation) RemovedCategoriesIDs() (ids []int) {
	for id := range m.removedcategories {
		ids = append(ids, id)
	}
	return
}

// CategoriesIDs returns the "categories" edge IDs in the mutation.
func (m *StoreMutation) CategoriesIDs() (ids []int) {
	for id := range m.categories {
		ids = append(ids, id)
	}
	return
}

// ResetCategories resets all changes to the "categories" edge.
func (m *StoreMutation) ResetCategories() {
	m.categories = nil
	m.clearedcategories = false
	m.removedcategories = nil
}

// AddUserIDs adds the "user" edge to the User entity by ids.
func (m *StoreMutation) AddUserIDs(ids ...int) {
	if m.user == nil {
		m.user = make(map[int]struct{})
	}
	for i := range ids {
		m.user[ids[i]] = struct{}{}
	}
}

// ClearUser clears the "user" edge to the User entity.
func (m *StoreMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *StoreMutation) UserCleared() bool {
	return m.cleareduser
}

// RemoveUserIDs removes the "user" edge to the User entity by IDs.
func (m *StoreMutation) RemoveUserIDs(ids ...int) {
	if m.removeduser == nil {
		m.removeduser = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user, ids[i])
		m.removeduser[ids[i]] = struct{}{}
	}
}

// RemovedUser returns the removed IDs of the "user" edge to the User entity.
func (m *StoreMutation) RemovedUserIDs() (ids []int) {
	for id := range m.removeduser {
		ids = append(ids, id)
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
func (m *StoreMutation) UserIDs() (ids []int) {
	for id := range m.user {
		ids = append(ids, id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *StoreMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
	m.removeduser = nil
}

// Where appends a list predicates to the StoreMutation builder.
func (m *StoreMutation) Where(ps ...predicate.Store) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StoreMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StoreMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Store, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StoreMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StoreMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Store).
func (m *StoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StoreMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.uuid != nil {
		fields = append(fields, store.FieldUUID)
	}
	if m.store_name != nil {
		fields = append(fields, store.FieldStoreName)
	}
	if m.created_by != nil {
		fields = append(fields, store.FieldCreatedBy)
	}
	if m.owner_email != nil {
		fields = append(fields, store.FieldOwnerEmail)
	}
	if m.store_address != nil {
		fields = append(fields, store.FieldStoreAddress)
	}
	if m.store_phone != nil {
		fields = append(fields, store.FieldStorePhone)
	}
	if m.store_type != nil {
		fields = append(fields, store.FieldStoreType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case store.FieldUUID:
		return m.UUID()
	case store.FieldStoreName:
		return m.StoreName()
	case store.FieldCreatedBy:
		return m.CreatedBy()
	case store.FieldOwnerEmail:
		return m.OwnerEmail()
	case store.FieldStoreAddress:
		return m.StoreAddress()
	case store.FieldStorePhone:
		return m.StorePhone()
	case store.FieldStoreType:
		return m.StoreType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case store.FieldUUID:
		return m.OldUUID(ctx)
	case store.FieldStoreName:
		return m.OldStoreName(ctx)
	case store.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case store.FieldOwnerEmail:
		return m.OldOwnerEmail(ctx)
	case store.FieldStoreAddress:
		return m.OldStoreAddress(ctx)
	case store.FieldStorePhone:
		return m.OldStorePhone(ctx)
	case store.FieldStoreType:
		return m.OldStoreType(ctx)
	}
	return nil, fmt.Errorf("unknown Store field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case store.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case store.FieldStoreName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreName(v)
		return nil
	case store.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case store.FieldOwnerEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerEmail(v)
		return nil
	case store.FieldStoreAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreAddress(v)
		return nil
	case store.FieldStorePhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStorePhone(v)
		return nil
	case store.FieldStoreType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreType(v)
		return nil
	}
	return fmt.Errorf("unknown Store field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StoreMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StoreMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Store numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StoreMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(store.FieldOwnerEmail) {
		fields = append(fields, store.FieldOwnerEmail)
	}
	if m.FieldCleared(store.FieldStoreAddress) {
		fields = append(fields, store.FieldStoreAddress)
	}
	if m.FieldCleared(store.FieldStorePhone) {
		fields = append(fields, store.FieldStorePhone)
	}
	if m.FieldCleared(store.FieldStoreType) {
		fields = append(fields, store.FieldStoreType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StoreMutation) ClearField(name string) error {
	switch name {
	case store.FieldOwnerEmail:
		m.ClearOwnerEmail()
		return nil
	case store.FieldStoreAddress:
		m.ClearStoreAddress()
		return nil
	case store.FieldStorePhone:
		m.ClearStorePhone()
		return nil
	case store.FieldStoreType:
		m.ClearStoreType()
		return nil
	}
	return fmt.Errorf("unknown Store nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StoreMutation) ResetField(name string) error {
	switch name {
	case store.FieldUUID:
		m.ResetUUID()
		return nil
	case store.FieldStoreName:
		m.ResetStoreName()
		return nil
	case store.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case store.FieldOwnerEmail:
		m.ResetOwnerEmail()
		return nil
	case store.FieldStoreAddress:
		m.ResetStoreAddress()
		return nil
	case store.FieldStorePhone:
		m.ResetStorePhone()
		return nil
	case store.FieldStoreType:
		m.ResetStoreType()
		return nil
	}
	return fmt.Errorf("unknown Store field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.items != nil {
		edges = append(edges, store.EdgeItems)
	}
	if m.categories != nil {
		edges = append(edges, store.EdgeCategories)
	}
	if m.user != nil {
		edges = append(edges, store.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StoreMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case store.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	case store.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.categories))
		for id := range m.categories {
			ids = append(ids, id)
		}
		return ids
	case store.EdgeUser:
		ids := make([]ent.Value, 0, len(m.user))
		for id := range m.user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeditems != nil {
		edges = append(edges, store.EdgeItems)
	}
	if m.removedcategories != nil {
		edges = append(edges, store.EdgeCategories)
	}
	if m.removeduser != nil {
		edges = append(edges, store.EdgeUser)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StoreMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case store.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	case store.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.removedcategories))
		for id := range m.removedcategories {
			ids = append(ids, id)
		}
		return ids
	case store.EdgeUser:
		ids := make([]ent.Value, 0, len(m.removeduser))
		for id := range m.removeduser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareditems {
		edges = append(edges, store.EdgeItems)
	}
	if m.clearedcategories {
		edges = append(edges, store.EdgeCategories)
	}
	if m.cleareduser {
		edges = append(edges, store.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StoreMutation) EdgeCleared(name string) bool {
	switch name {
	case store.EdgeItems:
		return m.cleareditems
	case store.EdgeCategories:
		return m.clearedcategories
	case store.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StoreMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Store unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StoreMutation) ResetEdge(name string) error {
	switch name {
	case store.EdgeItems:
		m.ResetItems()
		return nil
	case store.EdgeCategories:
		m.ResetCategories()
		return nil
	case store.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Store edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	email         *string
	is_owner      *bool
	store_id      *int
	addstore_id   *int
	clerk_user_id *string
	first_name    *string
	last_name     *string
	clearedFields map[string]struct{}
	store         map[int]struct{}
	removedstore  map[int]struct{}
	clearedstore  bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetIsOwner sets the "is_owner" field.
func (m *UserMutation) SetIsOwner(b bool) {
	m.is_owner = &b
}

// IsOwner returns the value of the "is_owner" field in the mutation.
func (m *UserMutation) IsOwner() (r bool, exists bool) {
	v := m.is_owner
	if v == nil {
		return
	}
	return *v, true
}

// OldIsOwner returns the old "is_owner" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsOwner(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsOwner: %w", err)
	}
	return oldValue.IsOwner, nil
}

// ResetIsOwner resets all changes to the "is_owner" field.
func (m *UserMutation) ResetIsOwner() {
	m.is_owner = nil
}

// SetStoreID sets the "store_id" field.
func (m *UserMutation) SetStoreID(i int) {
	m.store_id = &i
	m.addstore_id = nil
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *UserMutation) StoreID() (r int, exists bool) {
	v := m.store_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStoreID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// AddStoreID adds i to the "store_id" field.
func (m *UserMutation) AddStoreID(i int) {
	if m.addstore_id != nil {
		*m.addstore_id += i
	} else {
		m.addstore_id = &i
	}
}

// AddedStoreID returns the value that was added to the "store_id" field in this mutation.
func (m *UserMutation) AddedStoreID() (r int, exists bool) {
	v := m.addstore_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearStoreID clears the value of the "store_id" field.
func (m *UserMutation) ClearStoreID() {
	m.store_id = nil
	m.addstore_id = nil
	m.clearedFields[user.FieldStoreID] = struct{}{}
}

// StoreIDCleared returns if the "store_id" field was cleared in this mutation.
func (m *UserMutation) StoreIDCleared() bool {
	_, ok := m.clearedFields[user.FieldStoreID]
	return ok
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *UserMutation) ResetStoreID() {
	m.store_id = nil
	m.addstore_id = nil
	delete(m.clearedFields, user.FieldStoreID)
}

// SetClerkUserID sets the "clerk_user_id" field.
func (m *UserMutation) SetClerkUserID(s string) {
	m.clerk_user_id = &s
}

// ClerkUserID returns the value of the "clerk_user_id" field in the mutation.
func (m *UserMutation) ClerkUserID() (r string, exists bool) {
	v := m.clerk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClerkUserID returns the old "clerk_user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldClerkUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClerkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClerkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClerkUserID: %w", err)
	}
	return oldValue.ClerkUserID, nil
}

// ClearClerkUserID clears the value of the "clerk_user_id" field.
func (m *UserMutation) ClearClerkUserID() {
	m.clerk_user_id = nil
	m.clearedFields[user.FieldClerkUserID] = struct{}{}
}

// ClerkUserIDCleared returns if the "clerk_user_id" field was cleared in this mutation.
func (m *UserMutation) ClerkUserIDCleared() bool {
	_, ok := m.clearedFields[user.FieldClerkUserID]
	return ok
}

// ResetClerkUserID resets all changes to the "clerk_user_id" field.
func (m *UserMutation) ResetClerkUserID() {
	m.clerk_user_id = nil
	delete(m.clearedFields, user.FieldClerkUserID)
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *UserMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[user.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *UserMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[user.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, user.FieldFirstName)
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *UserMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[user.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *UserMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[user.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, user.FieldLastName)
}

// AddStoreIDs adds the "store" edge to the Store entity by ids.
func (m *UserMutation) AddStoreIDs(ids ...int) {
	if m.store == nil {
		m.store = make(map[int]struct{})
	}
	for i := range ids {
		m.store[ids[i]] = struct{}{}
	}
}

// ClearStore clears the "store" edge to the Store entity.
func (m *UserMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *UserMutation) StoreCleared() bool {
	return m.clearedstore
}

// RemoveStoreIDs removes the "store" edge to the Store entity by IDs.
func (m *UserMutation) RemoveStoreIDs(ids ...int) {
	if m.removedstore == nil {
		m.removedstore = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.store, ids[i])
		m.removedstore[ids[i]] = struct{}{}
	}
}

// RemovedStore returns the removed IDs of the "store" edge to the Store entity.
func (m *UserMutation) RemovedStoreIDs() (ids []int) {
	for id := range m.removedstore {
		ids = append(ids, id)
	}
	return
}

// StoreIDs returns the "store" edge IDs in the mutation.
func (m *UserMutation) StoreIDs() (ids []int) {
	for id := range m.store {
		ids = append(ids, id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *UserMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
	m.removedstore = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.is_owner != nil {
		fields = append(fields, user.FieldIsOwner)
	}
	if m.store_id != nil {
		fields = append(fields, user.FieldStoreID)
	}
	if m.clerk_user_id != nil {
		fields = append(fields, user.FieldClerkUserID)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldIsOwner:
		return m.IsOwner()
	case user.FieldStoreID:
		return m.StoreID()
	case user.FieldClerkUserID:
		return m.ClerkUserID()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldIsOwner:
		return m.OldIsOwner(ctx)
	case user.FieldStoreID:
		return m.OldStoreID(ctx)
	case user.FieldClerkUserID:
		return m.OldClerkUserID(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldIsOwner:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsOwner(v)
		return nil
	case user.FieldStoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case user.FieldClerkUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClerkUserID(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addstore_id != nil {
		fields = append(fields, user.FieldStoreID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldStoreID:
		return m.AddedStoreID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldStoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStoreID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldStoreID) {
		fields = append(fields, user.FieldStoreID)
	}
	if m.FieldCleared(user.FieldClerkUserID) {
		fields = append(fields, user.FieldClerkUserID)
	}
	if m.FieldCleared(user.FieldFirstName) {
		fields = append(fields, user.FieldFirstName)
	}
	if m.FieldCleared(user.FieldLastName) {
		fields = append(fields, user.FieldLastName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldStoreID:
		m.ClearStoreID()
		return nil
	case user.FieldClerkUserID:
		m.ClearClerkUserID()
		return nil
	case user.FieldFirstName:
		m.ClearFirstName()
		return nil
	case user.FieldLastName:
		m.ClearLastName()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldIsOwner:
		m.ResetIsOwner()
		return nil
	case user.FieldStoreID:
		m.ResetStoreID()
		return nil
	case user.FieldClerkUserID:
		m.ResetClerkUserID()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.store != nil {
		edges = append(edges, user.EdgeStore)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeStore:
		ids := make([]ent.Value, 0, len(m.store))
		for id := range m.store {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstore != nil {
		edges = append(edges, user.EdgeStore)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeStore:
		ids := make([]ent.Value, 0, len(m.removedstore))
		for id := range m.removedstore {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstore {
		edges = append(edges, user.EdgeStore)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeStore:
		return m.clearedstore
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeStore:
		m.ResetStore()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserToStoreMutation represents an operation that mutates the UserToStore nodes in the graph.
type UserToStoreMutation struct {
	config
	op                  Op
	typ                 string
	permission_level    *int
	addpermission_level *int
	joined_at           *int
	addjoined_at        *int
	clearedFields       map[string]struct{}
	user                *int
	cleareduser         bool
	store               *int
	clearedstore        bool
	done                bool
	oldValue            func(context.Context) (*UserToStore, error)
	predicates          []predicate.UserToStore
}

var _ ent.Mutation = (*UserToStoreMutation)(nil)

// usertostoreOption allows management of the mutation configuration using functional options.
type usertostoreOption func(*UserToStoreMutation)

// newUserToStoreMutation creates new mutation for the UserToStore entity.
func newUserToStoreMutation(c config, op Op, opts ...usertostoreOption) *UserToStoreMutation {
	m := &UserToStoreMutation{
		config:        c,
		op:            op,
		typ:           TypeUserToStore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserToStoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserToStoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetUserID sets the "user_id" field.
func (m *UserToStoreMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserToStoreMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserToStoreMutation) ResetUserID() {
	m.user = nil
}

// SetStoreID sets the "store_id" field.
func (m *UserToStoreMutation) SetStoreID(i int) {
	m.store = &i
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *UserToStoreMutation) StoreID() (r int, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *UserToStoreMutation) ResetStoreID() {
	m.store = nil
}

// SetPermissionLevel sets the "permission_level" field.
func (m *UserToStoreMutation) SetPermissionLevel(i int) {
	m.permission_level = &i
	m.addpermission_level = nil
}

// PermissionLevel returns the value of the "permission_level" field in the mutation.
func (m *UserToStoreMutation) PermissionLevel() (r int, exists bool) {
	v := m.permission_level
	if v == nil {
		return
	}
	return *v, true
}

// AddPermissionLevel adds i to the "permission_level" field.
func (m *UserToStoreMutation) AddPermissionLevel(i int) {
	if m.addpermission_level != nil {
		*m.addpermission_level += i
	} else {
		m.addpermission_level = &i
	}
}

// AddedPermissionLevel returns the value that was added to the "permission_level" field in this mutation.
func (m *UserToStoreMutation) AddedPermissionLevel() (r int, exists bool) {
	v := m.addpermission_level
	if v == nil {
		return
	}
	return *v, true
}

// ClearPermissionLevel clears the value of the "permission_level" field.
func (m *UserToStoreMutation) ClearPermissionLevel() {
	m.permission_level = nil
	m.addpermission_level = nil
	m.clearedFields[usertostore.FieldPermissionLevel] = struct{}{}
}

// PermissionLevelCleared returns if the "permission_level" field was cleared in this mutation.
func (m *UserToStoreMutation) PermissionLevelCleared() bool {
	_, ok := m.clearedFields[usertostore.FieldPermissionLevel]
	return ok
}

// ResetPermissionLevel resets all changes to the "permission_level" field.
func (m *UserToStoreMutation) ResetPermissionLevel() {
	m.permission_level = nil
	m.addpermission_level = nil
	delete(m.clearedFields, usertostore.FieldPermissionLevel)
}

// SetJoinedAt sets the "joined_at" field.
func (m *UserToStoreMutation) SetJoinedAt(i int) {
	m.joined_at = &i
	m.addjoined_at = nil
}

// JoinedAt returns the value of the "joined_at" field in the mutation.
func (m *UserToStoreMutation) JoinedAt() (r int, exists bool) {
	v := m.joined_at
	if v == nil {
		return
	}
	return *v, true
}

// AddJoinedAt adds i to the "joined_at" field.
func (m *UserToStoreMutation) AddJoinedAt(i int) {
	if m.addjoined_at != nil {
		*m.addjoined_at += i
	} else {
		m.addjoined_at = &i
	}
}

// AddedJoinedAt returns the value that was added to the "joined_at" field in this mutation.
func (m *UserToStoreMutation) AddedJoinedAt() (r int, exists bool) {
	v := m.addjoined_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (m *UserToStoreMutation) ClearJoinedAt() {
	m.joined_at = nil
	m.addjoined_at = nil
	m.clearedFields[usertostore.FieldJoinedAt] = struct{}{}
}

// JoinedAtCleared returns if the "joined_at" field was cleared in this mutation.
func (m *UserToStoreMutation) JoinedAtCleared() bool {
	_, ok := m.clearedFields[usertostore.FieldJoinedAt]
	return ok
}

// ResetJoinedAt resets all changes to the "joined_at" field.
func (m *UserToStoreMutation) ResetJoinedAt() {
	m.joined_at = nil
	m.addjoined_at = nil
	delete(m.clearedFields, usertostore.FieldJoinedAt)
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserToStoreMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[usertostore.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserToStoreMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserToStoreMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserToStoreMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearStore clears the "store" edge to the Store entity.
func (m *UserToStoreMutation) ClearStore() {
	m.clearedstore = true
	m.clearedFields[usertostore.FieldStoreID] = struct{}{}
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *UserToStoreMutation) StoreCleared() bool {
	return m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *UserToStoreMutation) StoreIDs() (ids []int) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *UserToStoreMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// Where appends a list predicates to the UserToStoreMutation builder.
func (m *UserToStoreMutation) Where(ps ...predicate.UserToStore) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserToStoreMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserToStoreMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserToStore, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserToStoreMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserToStoreMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserToStore).
func (m *UserToStoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserToStoreMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.user != nil {
		fields = append(fields, usertostore.FieldUserID)
	}
	if m.store != nil {
		fields = append(fields, usertostore.FieldStoreID)
	}
	if m.permission_level != nil {
		fields = append(fields, usertostore.FieldPermissionLevel)
	}
	if m.joined_at != nil {
		fields = append(fields, usertostore.FieldJoinedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserToStoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usertostore.FieldUserID:
		return m.UserID()
	case usertostore.FieldStoreID:
		return m.StoreID()
	case usertostore.FieldPermissionLevel:
		return m.PermissionLevel()
	case usertostore.FieldJoinedAt:
		return m.JoinedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserToStoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema UserToStore does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserToStoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usertostore.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case usertostore.FieldStoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case usertostore.FieldPermissionLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissionLevel(v)
		return nil
	case usertostore.FieldJoinedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserToStore field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserToStoreMutation) AddedFields() []string {
	var fields []string
	if m.addpermission_level != nil {
		fields = append(fields, usertostore.FieldPermissionLevel)
	}
	if m.addjoined_at != nil {
		fields = append(fields, usertostore.FieldJoinedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserToStoreMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usertostore.FieldPermissionLevel:
		return m.AddedPermissionLevel()
	case usertostore.FieldJoinedAt:
		return m.AddedJoinedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserToStoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usertostore.FieldPermissionLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPermissionLevel(v)
		return nil
	case usertostore.FieldJoinedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddJoinedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserToStore numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserToStoreMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usertostore.FieldPermissionLevel) {
		fields = append(fields, usertostore.FieldPermissionLevel)
	}
	if m.FieldCleared(usertostore.FieldJoinedAt) {
		fields = append(fields, usertostore.FieldJoinedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserToStoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserToStoreMutation) ClearField(name string) error {
	switch name {
	case usertostore.FieldPermissionLevel:
		m.ClearPermissionLevel()
		return nil
	case usertostore.FieldJoinedAt:
		m.ClearJoinedAt()
		return nil
	}
	return fmt.Errorf("unknown UserToStore nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserToStoreMutation) ResetField(name string) error {
	switch name {
	case usertostore.FieldUserID:
		m.ResetUserID()
		return nil
	case usertostore.FieldStoreID:
		m.ResetStoreID()
		return nil
	case usertostore.FieldPermissionLevel:
		m.ResetPermissionLevel()
		return nil
	case usertostore.FieldJoinedAt:
		m.ResetJoinedAt()
		return nil
	}
	return fmt.Errorf("unknown UserToStore field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserToStoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, usertostore.EdgeUser)
	}
	if m.store != nil {
		edges = append(edges, usertostore.EdgeStore)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserToStoreMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usertostore.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case usertostore.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserToStoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserToStoreMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserToStoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, usertostore.EdgeUser)
	}
	if m.clearedstore {
		edges = append(edges, usertostore.EdgeStore)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserToStoreMutation) EdgeCleared(name string) bool {
	switch name {
	case usertostore.EdgeUser:
		return m.cleareduser
	case usertostore.EdgeStore:
		return m.clearedstore
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserToStoreMutation) ClearEdge(name string) error {
	switch name {
	case usertostore.EdgeUser:
		m.ClearUser()
		return nil
	case usertostore.EdgeStore:
		m.ClearStore()
		return nil
	}
	return fmt.Errorf("unknown UserToStore unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserToStoreMutation) ResetEdge(name string) error {
	switch name {
	case usertostore.EdgeUser:
		m.ResetUser()
		return nil
	case usertostore.EdgeStore:
		m.ResetStore()
		return nil
	}
	return fmt.Errorf("unknown UserToStore edge %s", name)
}
