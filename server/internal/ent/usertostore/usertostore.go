// Code generated by ent, DO NOT EDIT.

package usertostore

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usertostore type in the database.
	Label = "user_to_store"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldPermissionLevel holds the string denoting the permission_level field in the database.
	FieldPermissionLevel = "permission_level"
	// FieldJoinedAt holds the string denoting the joined_at field in the database.
	FieldJoinedAt = "joined_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// StoreFieldID holds the string denoting the ID field of the Store.
	StoreFieldID = "id"
	// Table holds the table name of the usertostore in the database.
	Table = "user_to_stores"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_to_stores"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "user_to_stores"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "stores"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
)

// Columns holds all SQL columns for usertostore fields.
var Columns = []string{
	FieldUserID,
	FieldStoreID,
	FieldPermissionLevel,
	FieldJoinedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserToStore queries.
type OrderOption func(*sql.Selector)

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// ByPermissionLevel orders the results by the permission_level field.
func ByPermissionLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermissionLevel, opts...).ToFunc()
}

// ByJoinedAt orders the results by the joined_at field.
func ByJoinedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJoinedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, StoreColumn),
		sqlgraph.To(StoreInverseTable, StoreFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
	)
}
