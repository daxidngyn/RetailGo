// Code generated by ent, DO NOT EDIT.

package usertostore

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hktrib/RetailGo/internal/ent/predicate"
)

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldEQ(FieldUserID, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldEQ(FieldStoreID, v))
}

// PermissionLevel applies equality check predicate on the "permission_level" field. It's identical to PermissionLevelEQ.
func PermissionLevel(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldEQ(FieldPermissionLevel, v))
}

// JoinedAt applies equality check predicate on the "joined_at" field. It's identical to JoinedAtEQ.
func JoinedAt(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldEQ(FieldJoinedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldNotIn(FieldUserID, vs...))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldNotIn(FieldStoreID, vs...))
}

// PermissionLevelEQ applies the EQ predicate on the "permission_level" field.
func PermissionLevelEQ(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldEQ(FieldPermissionLevel, v))
}

// PermissionLevelNEQ applies the NEQ predicate on the "permission_level" field.
func PermissionLevelNEQ(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldNEQ(FieldPermissionLevel, v))
}

// PermissionLevelIn applies the In predicate on the "permission_level" field.
func PermissionLevelIn(vs ...int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldIn(FieldPermissionLevel, vs...))
}

// PermissionLevelNotIn applies the NotIn predicate on the "permission_level" field.
func PermissionLevelNotIn(vs ...int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldNotIn(FieldPermissionLevel, vs...))
}

// PermissionLevelGT applies the GT predicate on the "permission_level" field.
func PermissionLevelGT(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldGT(FieldPermissionLevel, v))
}

// PermissionLevelGTE applies the GTE predicate on the "permission_level" field.
func PermissionLevelGTE(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldGTE(FieldPermissionLevel, v))
}

// PermissionLevelLT applies the LT predicate on the "permission_level" field.
func PermissionLevelLT(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldLT(FieldPermissionLevel, v))
}

// PermissionLevelLTE applies the LTE predicate on the "permission_level" field.
func PermissionLevelLTE(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldLTE(FieldPermissionLevel, v))
}

// JoinedAtEQ applies the EQ predicate on the "joined_at" field.
func JoinedAtEQ(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldEQ(FieldJoinedAt, v))
}

// JoinedAtNEQ applies the NEQ predicate on the "joined_at" field.
func JoinedAtNEQ(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldNEQ(FieldJoinedAt, v))
}

// JoinedAtIn applies the In predicate on the "joined_at" field.
func JoinedAtIn(vs ...int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldIn(FieldJoinedAt, vs...))
}

// JoinedAtNotIn applies the NotIn predicate on the "joined_at" field.
func JoinedAtNotIn(vs ...int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldNotIn(FieldJoinedAt, vs...))
}

// JoinedAtGT applies the GT predicate on the "joined_at" field.
func JoinedAtGT(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldGT(FieldJoinedAt, v))
}

// JoinedAtGTE applies the GTE predicate on the "joined_at" field.
func JoinedAtGTE(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldGTE(FieldJoinedAt, v))
}

// JoinedAtLT applies the LT predicate on the "joined_at" field.
func JoinedAtLT(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldLT(FieldJoinedAt, v))
}

// JoinedAtLTE applies the LTE predicate on the "joined_at" field.
func JoinedAtLTE(v int) predicate.UserToStore {
	return predicate.UserToStore(sql.FieldLTE(FieldJoinedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserToStore {
	return predicate.UserToStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.Category) predicate.UserToStore {
	return predicate.UserToStore(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.UserToStore {
	return predicate.UserToStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, StoreColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Item) predicate.UserToStore {
	return predicate.UserToStore(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserToStore) predicate.UserToStore {
	return predicate.UserToStore(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserToStore) predicate.UserToStore {
	return predicate.UserToStore(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserToStore) predicate.UserToStore {
	return predicate.UserToStore(sql.NotPredicates(p))
}
