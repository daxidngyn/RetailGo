// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hktrib/RetailGo/internal/ent/clerkuser_store"
)

// ClerkUser_Store is the model entity for the ClerkUser_Store schema.
type ClerkUser_Store struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ClerkID holds the value of the "clerk_id" field.
	ClerkID string `json:"clerk_id,omitempty"`
	// StoreID holds the value of the "store_id" field.
	StoreID      int `json:"store_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClerkUser_Store) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clerkuser_store.FieldID, clerkuser_store.FieldStoreID:
			values[i] = new(sql.NullInt64)
		case clerkuser_store.FieldClerkID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClerkUser_Store fields.
func (cus *ClerkUser_Store) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clerkuser_store.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cus.ID = int(value.Int64)
		case clerkuser_store.FieldClerkID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field clerk_id", values[i])
			} else if value.Valid {
				cus.ClerkID = value.String
			}
		case clerkuser_store.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				cus.StoreID = int(value.Int64)
			}
		default:
			cus.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ClerkUser_Store.
// This includes values selected through modifiers, order, etc.
func (cus *ClerkUser_Store) Value(name string) (ent.Value, error) {
	return cus.selectValues.Get(name)
}

// Update returns a builder for updating this ClerkUser_Store.
// Note that you need to call ClerkUser_Store.Unwrap() before calling this method if this ClerkUser_Store
// was returned from a transaction, and the transaction was committed or rolled back.
func (cus *ClerkUser_Store) Update() *ClerkUserStoreUpdateOne {
	return NewClerkUserStoreClient(cus.config).UpdateOne(cus)
}

// Unwrap unwraps the ClerkUser_Store entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cus *ClerkUser_Store) Unwrap() *ClerkUser_Store {
	_tx, ok := cus.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClerkUser_Store is not a transactional entity")
	}
	cus.config.driver = _tx.drv
	return cus
}

// String implements the fmt.Stringer.
func (cus *ClerkUser_Store) String() string {
	var builder strings.Builder
	builder.WriteString("ClerkUser_Store(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cus.ID))
	builder.WriteString("clerk_id=")
	builder.WriteString(cus.ClerkID)
	builder.WriteString(", ")
	builder.WriteString("store_id=")
	builder.WriteString(fmt.Sprintf("%v", cus.StoreID))
	builder.WriteByte(')')
	return builder.String()
}

// ClerkUser_Stores is a parsable slice of ClerkUser_Store.
type ClerkUser_Stores []*ClerkUser_Store
