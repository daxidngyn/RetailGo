// Code generated by ent, DO NOT EDIT.

package clerkuser_store

import (
	"entgo.io/ent/dialect/sql"
	"github.com/hktrib/RetailGo/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldLTE(FieldID, id))
}

// ClerkID applies equality check predicate on the "clerk_id" field. It's identical to ClerkIDEQ.
func ClerkID(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldEQ(FieldClerkID, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldEQ(FieldStoreID, v))
}

// ClerkIDEQ applies the EQ predicate on the "clerk_id" field.
func ClerkIDEQ(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldEQ(FieldClerkID, v))
}

// ClerkIDNEQ applies the NEQ predicate on the "clerk_id" field.
func ClerkIDNEQ(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldNEQ(FieldClerkID, v))
}

// ClerkIDIn applies the In predicate on the "clerk_id" field.
func ClerkIDIn(vs ...string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldIn(FieldClerkID, vs...))
}

// ClerkIDNotIn applies the NotIn predicate on the "clerk_id" field.
func ClerkIDNotIn(vs ...string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldNotIn(FieldClerkID, vs...))
}

// ClerkIDGT applies the GT predicate on the "clerk_id" field.
func ClerkIDGT(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldGT(FieldClerkID, v))
}

// ClerkIDGTE applies the GTE predicate on the "clerk_id" field.
func ClerkIDGTE(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldGTE(FieldClerkID, v))
}

// ClerkIDLT applies the LT predicate on the "clerk_id" field.
func ClerkIDLT(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldLT(FieldClerkID, v))
}

// ClerkIDLTE applies the LTE predicate on the "clerk_id" field.
func ClerkIDLTE(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldLTE(FieldClerkID, v))
}

// ClerkIDContains applies the Contains predicate on the "clerk_id" field.
func ClerkIDContains(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldContains(FieldClerkID, v))
}

// ClerkIDHasPrefix applies the HasPrefix predicate on the "clerk_id" field.
func ClerkIDHasPrefix(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldHasPrefix(FieldClerkID, v))
}

// ClerkIDHasSuffix applies the HasSuffix predicate on the "clerk_id" field.
func ClerkIDHasSuffix(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldHasSuffix(FieldClerkID, v))
}

// ClerkIDEqualFold applies the EqualFold predicate on the "clerk_id" field.
func ClerkIDEqualFold(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldEqualFold(FieldClerkID, v))
}

// ClerkIDContainsFold applies the ContainsFold predicate on the "clerk_id" field.
func ClerkIDContainsFold(v string) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldContainsFold(FieldClerkID, v))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldNotIn(FieldStoreID, vs...))
}

// StoreIDGT applies the GT predicate on the "store_id" field.
func StoreIDGT(v int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldGT(FieldStoreID, v))
}

// StoreIDGTE applies the GTE predicate on the "store_id" field.
func StoreIDGTE(v int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldGTE(FieldStoreID, v))
}

// StoreIDLT applies the LT predicate on the "store_id" field.
func StoreIDLT(v int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldLT(FieldStoreID, v))
}

// StoreIDLTE applies the LTE predicate on the "store_id" field.
func StoreIDLTE(v int) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.FieldLTE(FieldStoreID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ClerkUser_Store) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ClerkUser_Store) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ClerkUser_Store) predicate.ClerkUser_Store {
	return predicate.ClerkUser_Store(sql.NotPredicates(p))
}
