// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hktrib/RetailGo/internal/ent/store"
)

// Store is the model entity for the Store schema.
type Store struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// StoreName holds the value of the "store_name" field.
	StoreName string `json:"store_name,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// OwnerEmail holds the value of the "owner_email" field.
	OwnerEmail string `json:"owner_email,omitempty"`
	// StoreAddress holds the value of the "store_address" field.
	StoreAddress string `json:"store_address,omitempty"`
	// StorePhone holds the value of the "store_phone" field.
	StorePhone string `json:"store_phone,omitempty"`
	// StripeAccountID holds the value of the "stripe_account_id" field.
	StripeAccountID string `json:"stripe_account_id,omitempty"`
	// StoreType holds the value of the "store_type" field.
	StoreType string `json:"store_type,omitempty"`
	// IsAuthorized holds the value of the "is_authorized" field.
	IsAuthorized bool `json:"is_authorized,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StoreQuery when eager-loading is set.
	Edges        StoreEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StoreEdges holds the relations/edges for other nodes in the graph.
type StoreEdges struct {
	// Items holds the value of the items edge.
	Items []*Item `json:"items,omitempty"`
	// Categories holds the value of the categories edge.
	Categories []*Category `json:"categories,omitempty"`
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// UserToStore holds the value of the UserToStore edge.
	UserToStore []*UserToStore `json:"UserToStore,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) ItemsOrErr() ([]*Item, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) CategoriesOrErr() ([]*Category, error) {
	if e.loadedTypes[1] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// UserToStoreOrErr returns the UserToStore value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) UserToStoreOrErr() ([]*UserToStore, error) {
	if e.loadedTypes[3] {
		return e.UserToStore, nil
	}
	return nil, &NotLoadedError{edge: "UserToStore"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Store) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case store.FieldIsAuthorized:
			values[i] = new(sql.NullBool)
		case store.FieldID:
			values[i] = new(sql.NullInt64)
		case store.FieldUUID, store.FieldStoreName, store.FieldCreatedBy, store.FieldOwnerEmail, store.FieldStoreAddress, store.FieldStorePhone, store.FieldStripeAccountID, store.FieldStoreType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Store fields.
func (s *Store) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case store.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case store.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				s.UUID = value.String
			}
		case store.FieldStoreName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_name", values[i])
			} else if value.Valid {
				s.StoreName = value.String
			}
		case store.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = value.String
			}
		case store.FieldOwnerEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_email", values[i])
			} else if value.Valid {
				s.OwnerEmail = value.String
			}
		case store.FieldStoreAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_address", values[i])
			} else if value.Valid {
				s.StoreAddress = value.String
			}
		case store.FieldStorePhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_phone", values[i])
			} else if value.Valid {
				s.StorePhone = value.String
			}
		case store.FieldStripeAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_account_id", values[i])
			} else if value.Valid {
				s.StripeAccountID = value.String
			}
		case store.FieldStoreType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_type", values[i])
			} else if value.Valid {
				s.StoreType = value.String
			}
		case store.FieldIsAuthorized:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_authorized", values[i])
			} else if value.Valid {
				s.IsAuthorized = value.Bool
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Store.
// This includes values selected through modifiers, order, etc.
func (s *Store) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryItems queries the "items" edge of the Store entity.
func (s *Store) QueryItems() *ItemQuery {
	return NewStoreClient(s.config).QueryItems(s)
}

// QueryCategories queries the "categories" edge of the Store entity.
func (s *Store) QueryCategories() *CategoryQuery {
	return NewStoreClient(s.config).QueryCategories(s)
}

// QueryUser queries the "user" edge of the Store entity.
func (s *Store) QueryUser() *UserQuery {
	return NewStoreClient(s.config).QueryUser(s)
}

// QueryUserToStore queries the "UserToStore" edge of the Store entity.
func (s *Store) QueryUserToStore() *UserToStoreQuery {
	return NewStoreClient(s.config).QueryUserToStore(s)
}

// Update returns a builder for updating this Store.
// Note that you need to call Store.Unwrap() before calling this method if this Store
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Store) Update() *StoreUpdateOne {
	return NewStoreClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Store entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Store) Unwrap() *Store {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Store is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Store) String() string {
	var builder strings.Builder
	builder.WriteString("Store(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("uuid=")
	builder.WriteString(s.UUID)
	builder.WriteString(", ")
	builder.WriteString("store_name=")
	builder.WriteString(s.StoreName)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(s.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_email=")
	builder.WriteString(s.OwnerEmail)
	builder.WriteString(", ")
	builder.WriteString("store_address=")
	builder.WriteString(s.StoreAddress)
	builder.WriteString(", ")
	builder.WriteString("store_phone=")
	builder.WriteString(s.StorePhone)
	builder.WriteString(", ")
	builder.WriteString("stripe_account_id=")
	builder.WriteString(s.StripeAccountID)
	builder.WriteString(", ")
	builder.WriteString("store_type=")
	builder.WriteString(s.StoreType)
	builder.WriteString(", ")
	builder.WriteString("is_authorized=")
	builder.WriteString(fmt.Sprintf("%v", s.IsAuthorized))
	builder.WriteByte(')')
	return builder.String()
}

// Stores is a parsable slice of Store.
type Stores []*Store
