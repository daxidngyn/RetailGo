// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hktrib/RetailGo/internal/ent/category"
	"github.com/hktrib/RetailGo/internal/ent/categoryitem"
	"github.com/hktrib/RetailGo/internal/ent/item"
	"github.com/hktrib/RetailGo/internal/ent/predicate"
)

// CategoryItemQuery is the builder for querying CategoryItem entities.
type CategoryItemQuery struct {
	config
	ctx          *QueryContext
	order        []categoryitem.OrderOption
	inters       []Interceptor
	predicates   []predicate.CategoryItem
	withCategory *CategoryQuery
	withItem     *ItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CategoryItemQuery builder.
func (ciq *CategoryItemQuery) Where(ps ...predicate.CategoryItem) *CategoryItemQuery {
	ciq.predicates = append(ciq.predicates, ps...)
	return ciq
}

// Limit the number of records to be returned by this query.
func (ciq *CategoryItemQuery) Limit(limit int) *CategoryItemQuery {
	ciq.ctx.Limit = &limit
	return ciq
}

// Offset to start from.
func (ciq *CategoryItemQuery) Offset(offset int) *CategoryItemQuery {
	ciq.ctx.Offset = &offset
	return ciq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ciq *CategoryItemQuery) Unique(unique bool) *CategoryItemQuery {
	ciq.ctx.Unique = &unique
	return ciq
}

// Order specifies how the records should be ordered.
func (ciq *CategoryItemQuery) Order(o ...categoryitem.OrderOption) *CategoryItemQuery {
	ciq.order = append(ciq.order, o...)
	return ciq
}

// QueryCategory chains the current query on the "category" edge.
func (ciq *CategoryItemQuery) QueryCategory() *CategoryQuery {
	query := (&CategoryClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(categoryitem.Table, categoryitem.CategoryColumn, selector),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, categoryitem.CategoryTable, categoryitem.CategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItem chains the current query on the "item" edge.
func (ciq *CategoryItemQuery) QueryItem() *ItemQuery {
	query := (&ItemClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(categoryitem.Table, categoryitem.ItemColumn, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, categoryitem.ItemTable, categoryitem.ItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CategoryItem entity from the query.
// Returns a *NotFoundError when no CategoryItem was found.
func (ciq *CategoryItemQuery) First(ctx context.Context) (*CategoryItem, error) {
	nodes, err := ciq.Limit(1).All(setContextOp(ctx, ciq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{categoryitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ciq *CategoryItemQuery) FirstX(ctx context.Context) *CategoryItem {
	node, err := ciq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single CategoryItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CategoryItem entity is found.
// Returns a *NotFoundError when no CategoryItem entities are found.
func (ciq *CategoryItemQuery) Only(ctx context.Context) (*CategoryItem, error) {
	nodes, err := ciq.Limit(2).All(setContextOp(ctx, ciq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{categoryitem.Label}
	default:
		return nil, &NotSingularError{categoryitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ciq *CategoryItemQuery) OnlyX(ctx context.Context) *CategoryItem {
	node, err := ciq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of CategoryItems.
func (ciq *CategoryItemQuery) All(ctx context.Context) ([]*CategoryItem, error) {
	ctx = setContextOp(ctx, ciq.ctx, "All")
	if err := ciq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CategoryItem, *CategoryItemQuery]()
	return withInterceptors[[]*CategoryItem](ctx, ciq, qr, ciq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ciq *CategoryItemQuery) AllX(ctx context.Context) []*CategoryItem {
	nodes, err := ciq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (ciq *CategoryItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ciq.ctx, "Count")
	if err := ciq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ciq, querierCount[*CategoryItemQuery](), ciq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ciq *CategoryItemQuery) CountX(ctx context.Context) int {
	count, err := ciq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ciq *CategoryItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ciq.ctx, "Exist")
	switch _, err := ciq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ciq *CategoryItemQuery) ExistX(ctx context.Context) bool {
	exist, err := ciq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CategoryItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ciq *CategoryItemQuery) Clone() *CategoryItemQuery {
	if ciq == nil {
		return nil
	}
	return &CategoryItemQuery{
		config:       ciq.config,
		ctx:          ciq.ctx.Clone(),
		order:        append([]categoryitem.OrderOption{}, ciq.order...),
		inters:       append([]Interceptor{}, ciq.inters...),
		predicates:   append([]predicate.CategoryItem{}, ciq.predicates...),
		withCategory: ciq.withCategory.Clone(),
		withItem:     ciq.withItem.Clone(),
		// clone intermediate query.
		sql:  ciq.sql.Clone(),
		path: ciq.path,
	}
}

// WithCategory tells the query-builder to eager-load the nodes that are connected to
// the "category" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *CategoryItemQuery) WithCategory(opts ...func(*CategoryQuery)) *CategoryItemQuery {
	query := (&CategoryClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withCategory = query
	return ciq
}

// WithItem tells the query-builder to eager-load the nodes that are connected to
// the "item" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *CategoryItemQuery) WithItem(opts ...func(*ItemQuery)) *CategoryItemQuery {
	query := (&ItemClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withItem = query
	return ciq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CategoryID int `json:"category_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CategoryItem.Query().
//		GroupBy(categoryitem.FieldCategoryID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ciq *CategoryItemQuery) GroupBy(field string, fields ...string) *CategoryItemGroupBy {
	ciq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CategoryItemGroupBy{build: ciq}
	grbuild.flds = &ciq.ctx.Fields
	grbuild.label = categoryitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CategoryID int `json:"category_id,omitempty"`
//	}
//
//	client.CategoryItem.Query().
//		Select(categoryitem.FieldCategoryID).
//		Scan(ctx, &v)
func (ciq *CategoryItemQuery) Select(fields ...string) *CategoryItemSelect {
	ciq.ctx.Fields = append(ciq.ctx.Fields, fields...)
	sbuild := &CategoryItemSelect{CategoryItemQuery: ciq}
	sbuild.label = categoryitem.Label
	sbuild.flds, sbuild.scan = &ciq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CategoryItemSelect configured with the given aggregations.
func (ciq *CategoryItemQuery) Aggregate(fns ...AggregateFunc) *CategoryItemSelect {
	return ciq.Select().Aggregate(fns...)
}

func (ciq *CategoryItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ciq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ciq); err != nil {
				return err
			}
		}
	}
	for _, f := range ciq.ctx.Fields {
		if !categoryitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ciq.path != nil {
		prev, err := ciq.path(ctx)
		if err != nil {
			return err
		}
		ciq.sql = prev
	}
	return nil
}

func (ciq *CategoryItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CategoryItem, error) {
	var (
		nodes       = []*CategoryItem{}
		_spec       = ciq.querySpec()
		loadedTypes = [2]bool{
			ciq.withCategory != nil,
			ciq.withItem != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CategoryItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CategoryItem{config: ciq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ciq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ciq.withCategory; query != nil {
		if err := ciq.loadCategory(ctx, query, nodes, nil,
			func(n *CategoryItem, e *Category) { n.Edges.Category = e }); err != nil {
			return nil, err
		}
	}
	if query := ciq.withItem; query != nil {
		if err := ciq.loadItem(ctx, query, nodes, nil,
			func(n *CategoryItem, e *Item) { n.Edges.Item = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ciq *CategoryItemQuery) loadCategory(ctx context.Context, query *CategoryQuery, nodes []*CategoryItem, init func(*CategoryItem), assign func(*CategoryItem, *Category)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CategoryItem)
	for i := range nodes {
		fk := nodes[i].CategoryID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(category.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "category_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ciq *CategoryItemQuery) loadItem(ctx context.Context, query *ItemQuery, nodes []*CategoryItem, init func(*CategoryItem), assign func(*CategoryItem, *Item)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CategoryItem)
	for i := range nodes {
		fk := nodes[i].ItemID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ciq *CategoryItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ciq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, ciq.driver, _spec)
}

func (ciq *CategoryItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(categoryitem.Table, categoryitem.Columns, nil)
	_spec.From = ciq.sql
	if unique := ciq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ciq.path != nil {
		_spec.Unique = true
	}
	if fields := ciq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if ciq.withCategory != nil {
			_spec.Node.AddColumnOnce(categoryitem.FieldCategoryID)
		}
		if ciq.withItem != nil {
			_spec.Node.AddColumnOnce(categoryitem.FieldItemID)
		}
	}
	if ps := ciq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ciq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ciq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ciq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ciq *CategoryItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ciq.driver.Dialect())
	t1 := builder.Table(categoryitem.Table)
	columns := ciq.ctx.Fields
	if len(columns) == 0 {
		columns = categoryitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ciq.sql != nil {
		selector = ciq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ciq.ctx.Unique != nil && *ciq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ciq.predicates {
		p(selector)
	}
	for _, p := range ciq.order {
		p(selector)
	}
	if offset := ciq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ciq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CategoryItemGroupBy is the group-by builder for CategoryItem entities.
type CategoryItemGroupBy struct {
	selector
	build *CategoryItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cigb *CategoryItemGroupBy) Aggregate(fns ...AggregateFunc) *CategoryItemGroupBy {
	cigb.fns = append(cigb.fns, fns...)
	return cigb
}

// Scan applies the selector query and scans the result into the given value.
func (cigb *CategoryItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cigb.build.ctx, "GroupBy")
	if err := cigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CategoryItemQuery, *CategoryItemGroupBy](ctx, cigb.build, cigb, cigb.build.inters, v)
}

func (cigb *CategoryItemGroupBy) sqlScan(ctx context.Context, root *CategoryItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cigb.fns))
	for _, fn := range cigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cigb.flds)+len(cigb.fns))
		for _, f := range *cigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CategoryItemSelect is the builder for selecting fields of CategoryItem entities.
type CategoryItemSelect struct {
	*CategoryItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cis *CategoryItemSelect) Aggregate(fns ...AggregateFunc) *CategoryItemSelect {
	cis.fns = append(cis.fns, fns...)
	return cis
}

// Scan applies the selector query and scans the result into the given value.
func (cis *CategoryItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cis.ctx, "Select")
	if err := cis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CategoryItemQuery, *CategoryItemSelect](ctx, cis.CategoryItemQuery, cis, cis.inters, v)
}

func (cis *CategoryItemSelect) sqlScan(ctx context.Context, root *CategoryItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cis.fns))
	for _, fn := range cis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
