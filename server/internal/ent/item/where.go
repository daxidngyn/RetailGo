// Code generated by ent, DO NOT EDIT.

package item

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hktrib/RetailGo/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldName, v))
}

// Photo applies equality check predicate on the "photo" field. It's identical to PhotoEQ.
func Photo(v []byte) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPhoto, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldQuantity, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPrice, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldStoreID, v))
}

// StripePriceID applies equality check predicate on the "stripe_price_id" field. It's identical to StripePriceIDEQ.
func StripePriceID(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldStripePriceID, v))
}

// StripeProductID applies equality check predicate on the "stripe_product_id" field. It's identical to StripeProductIDEQ.
func StripeProductID(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldStripeProductID, v))
}

// CategoryName applies equality check predicate on the "category_name" field. It's identical to CategoryNameEQ.
func CategoryName(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldCategoryName, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldName, v))
}

// PhotoEQ applies the EQ predicate on the "photo" field.
func PhotoEQ(v []byte) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPhoto, v))
}

// PhotoNEQ applies the NEQ predicate on the "photo" field.
func PhotoNEQ(v []byte) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldPhoto, v))
}

// PhotoIn applies the In predicate on the "photo" field.
func PhotoIn(vs ...[]byte) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldPhoto, vs...))
}

// PhotoNotIn applies the NotIn predicate on the "photo" field.
func PhotoNotIn(vs ...[]byte) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldPhoto, vs...))
}

// PhotoGT applies the GT predicate on the "photo" field.
func PhotoGT(v []byte) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldPhoto, v))
}

// PhotoGTE applies the GTE predicate on the "photo" field.
func PhotoGTE(v []byte) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldPhoto, v))
}

// PhotoLT applies the LT predicate on the "photo" field.
func PhotoLT(v []byte) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldPhoto, v))
}

// PhotoLTE applies the LTE predicate on the "photo" field.
func PhotoLTE(v []byte) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldPhoto, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldQuantity, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldPrice, v))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldStoreID, vs...))
}

// StripePriceIDEQ applies the EQ predicate on the "stripe_price_id" field.
func StripePriceIDEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldStripePriceID, v))
}

// StripePriceIDNEQ applies the NEQ predicate on the "stripe_price_id" field.
func StripePriceIDNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldStripePriceID, v))
}

// StripePriceIDIn applies the In predicate on the "stripe_price_id" field.
func StripePriceIDIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldStripePriceID, vs...))
}

// StripePriceIDNotIn applies the NotIn predicate on the "stripe_price_id" field.
func StripePriceIDNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldStripePriceID, vs...))
}

// StripePriceIDGT applies the GT predicate on the "stripe_price_id" field.
func StripePriceIDGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldStripePriceID, v))
}

// StripePriceIDGTE applies the GTE predicate on the "stripe_price_id" field.
func StripePriceIDGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldStripePriceID, v))
}

// StripePriceIDLT applies the LT predicate on the "stripe_price_id" field.
func StripePriceIDLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldStripePriceID, v))
}

// StripePriceIDLTE applies the LTE predicate on the "stripe_price_id" field.
func StripePriceIDLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldStripePriceID, v))
}

// StripePriceIDContains applies the Contains predicate on the "stripe_price_id" field.
func StripePriceIDContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldStripePriceID, v))
}

// StripePriceIDHasPrefix applies the HasPrefix predicate on the "stripe_price_id" field.
func StripePriceIDHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldStripePriceID, v))
}

// StripePriceIDHasSuffix applies the HasSuffix predicate on the "stripe_price_id" field.
func StripePriceIDHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldStripePriceID, v))
}

// StripePriceIDEqualFold applies the EqualFold predicate on the "stripe_price_id" field.
func StripePriceIDEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldStripePriceID, v))
}

// StripePriceIDContainsFold applies the ContainsFold predicate on the "stripe_price_id" field.
func StripePriceIDContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldStripePriceID, v))
}

// StripeProductIDEQ applies the EQ predicate on the "stripe_product_id" field.
func StripeProductIDEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldStripeProductID, v))
}

// StripeProductIDNEQ applies the NEQ predicate on the "stripe_product_id" field.
func StripeProductIDNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldStripeProductID, v))
}

// StripeProductIDIn applies the In predicate on the "stripe_product_id" field.
func StripeProductIDIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldStripeProductID, vs...))
}

// StripeProductIDNotIn applies the NotIn predicate on the "stripe_product_id" field.
func StripeProductIDNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldStripeProductID, vs...))
}

// StripeProductIDGT applies the GT predicate on the "stripe_product_id" field.
func StripeProductIDGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldStripeProductID, v))
}

// StripeProductIDGTE applies the GTE predicate on the "stripe_product_id" field.
func StripeProductIDGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldStripeProductID, v))
}

// StripeProductIDLT applies the LT predicate on the "stripe_product_id" field.
func StripeProductIDLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldStripeProductID, v))
}

// StripeProductIDLTE applies the LTE predicate on the "stripe_product_id" field.
func StripeProductIDLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldStripeProductID, v))
}

// StripeProductIDContains applies the Contains predicate on the "stripe_product_id" field.
func StripeProductIDContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldStripeProductID, v))
}

// StripeProductIDHasPrefix applies the HasPrefix predicate on the "stripe_product_id" field.
func StripeProductIDHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldStripeProductID, v))
}

// StripeProductIDHasSuffix applies the HasSuffix predicate on the "stripe_product_id" field.
func StripeProductIDHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldStripeProductID, v))
}

// StripeProductIDEqualFold applies the EqualFold predicate on the "stripe_product_id" field.
func StripeProductIDEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldStripeProductID, v))
}

// StripeProductIDContainsFold applies the ContainsFold predicate on the "stripe_product_id" field.
func StripeProductIDContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldStripeProductID, v))
}

// CategoryNameEQ applies the EQ predicate on the "category_name" field.
func CategoryNameEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldCategoryName, v))
}

// CategoryNameNEQ applies the NEQ predicate on the "category_name" field.
func CategoryNameNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldCategoryName, v))
}

// CategoryNameIn applies the In predicate on the "category_name" field.
func CategoryNameIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldCategoryName, vs...))
}

// CategoryNameNotIn applies the NotIn predicate on the "category_name" field.
func CategoryNameNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldCategoryName, vs...))
}

// CategoryNameGT applies the GT predicate on the "category_name" field.
func CategoryNameGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldCategoryName, v))
}

// CategoryNameGTE applies the GTE predicate on the "category_name" field.
func CategoryNameGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldCategoryName, v))
}

// CategoryNameLT applies the LT predicate on the "category_name" field.
func CategoryNameLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldCategoryName, v))
}

// CategoryNameLTE applies the LTE predicate on the "category_name" field.
func CategoryNameLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldCategoryName, v))
}

// CategoryNameContains applies the Contains predicate on the "category_name" field.
func CategoryNameContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldCategoryName, v))
}

// CategoryNameHasPrefix applies the HasPrefix predicate on the "category_name" field.
func CategoryNameHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldCategoryName, v))
}

// CategoryNameHasSuffix applies the HasSuffix predicate on the "category_name" field.
func CategoryNameHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldCategoryName, v))
}

// CategoryNameEqualFold applies the EqualFold predicate on the "category_name" field.
func CategoryNameEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldCategoryName, v))
}

// CategoryNameContainsFold applies the ContainsFold predicate on the "category_name" field.
func CategoryNameContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldCategoryName, v))
}

// HasCategory applies the HasEdge predicate on the "category" edge.
func HasCategory() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CategoryTable, CategoryPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryWith applies the HasEdge predicate on the "category" edge with a given conditions (other predicates).
func HasCategoryWith(preds ...predicate.Category) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategoryItem applies the HasEdge predicate on the "category_item" edge.
func HasCategoryItem() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CategoryItemTable, CategoryItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryItemWith applies the HasEdge predicate on the "category_item" edge with a given conditions (other predicates).
func HasCategoryItemWith(preds ...predicate.CategoryItem) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newCategoryItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Item) predicate.Item {
	return predicate.Item(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Item) predicate.Item {
	return predicate.Item(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Item) predicate.Item {
	return predicate.Item(sql.NotPredicates(p))
}
