// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hktrib/RetailGo/internal/ent/clerkuser_store"
	"github.com/hktrib/RetailGo/internal/ent/predicate"
)

// ClerkUserStoreDelete is the builder for deleting a ClerkUser_Store entity.
type ClerkUserStoreDelete struct {
	config
	hooks    []Hook
	mutation *ClerkUserStoreMutation
}

// Where appends a list predicates to the ClerkUserStoreDelete builder.
func (cusd *ClerkUserStoreDelete) Where(ps ...predicate.ClerkUser_Store) *ClerkUserStoreDelete {
	cusd.mutation.Where(ps...)
	return cusd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cusd *ClerkUserStoreDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cusd.sqlExec, cusd.mutation, cusd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cusd *ClerkUserStoreDelete) ExecX(ctx context.Context) int {
	n, err := cusd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cusd *ClerkUserStoreDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(clerkuser_store.Table, sqlgraph.NewFieldSpec(clerkuser_store.FieldID, field.TypeInt))
	if ps := cusd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cusd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cusd.mutation.done = true
	return affected, err
}

// ClerkUserStoreDeleteOne is the builder for deleting a single ClerkUser_Store entity.
type ClerkUserStoreDeleteOne struct {
	cusd *ClerkUserStoreDelete
}

// Where appends a list predicates to the ClerkUserStoreDelete builder.
func (cusdo *ClerkUserStoreDeleteOne) Where(ps ...predicate.ClerkUser_Store) *ClerkUserStoreDeleteOne {
	cusdo.cusd.mutation.Where(ps...)
	return cusdo
}

// Exec executes the deletion query.
func (cusdo *ClerkUserStoreDeleteOne) Exec(ctx context.Context) error {
	n, err := cusdo.cusd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{clerkuser_store.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cusdo *ClerkUserStoreDeleteOne) ExecX(ctx context.Context) {
	if err := cusdo.Exec(ctx); err != nil {
		panic(err)
	}
}
