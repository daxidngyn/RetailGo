// Code generated by ent, DO NOT EDIT.

package categoryitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the categoryitem type in the database.
	Label = "category_item"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// FieldItemID holds the string denoting the item_id field in the database.
	FieldItemID = "item_id"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// EdgeItem holds the string denoting the item edge name in mutations.
	EdgeItem = "item"
	// CategoryFieldID holds the string denoting the ID field of the Category.
	CategoryFieldID = "id"
	// ItemFieldID holds the string denoting the ID field of the Item.
	ItemFieldID = "id"
	// Table holds the table name of the categoryitem in the database.
	Table = "category_items"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "category_items"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "category_id"
	// ItemTable is the table that holds the item relation/edge.
	ItemTable = "category_items"
	// ItemInverseTable is the table name for the Item entity.
	// It exists in this package in order to avoid circular dependency with the "item" package.
	ItemInverseTable = "items"
	// ItemColumn is the table column denoting the item relation/edge.
	ItemColumn = "item_id"
)

// Columns holds all SQL columns for categoryitem fields.
var Columns = []string{
	FieldCategoryID,
	FieldItemID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CategoryItem queries.
type OrderOption func(*sql.Selector)

// ByCategoryID orders the results by the category_id field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}

// ByItemID orders the results by the item_id field.
func ByItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemID, opts...).ToFunc()
}

// ByCategoryField orders the results by category field.
func ByCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByItemField orders the results by item field.
func ByItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemStep(), sql.OrderByField(field, opts...))
	}
}
func newCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, CategoryColumn),
		sqlgraph.To(CategoryInverseTable, CategoryFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CategoryTable, CategoryColumn),
	)
}
func newItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, ItemColumn),
		sqlgraph.To(ItemInverseTable, ItemFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ItemTable, ItemColumn),
	)
}
